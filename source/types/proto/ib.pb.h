// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ib.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ib_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ib_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ib_2eproto JDE_MARKETS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct JDE_MARKETS_EXPORT TableStruct_ib_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ib_2eproto;
namespace Jde {
namespace Markets {
namespace Proto {
class ComboLeg;
class ComboLegDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ComboLegDefaultTypeInternal _ComboLeg_default_instance_;
class Contract;
class ContractDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ContractDefaultTypeInternal _Contract_default_instance_;
class DeltaNeutralContract;
class DeltaNeutralContractDefaultTypeInternal;
JDE_MARKETS_EXPORT extern DeltaNeutralContractDefaultTypeInternal _DeltaNeutralContract_default_instance_;
}  // namespace Proto
}  // namespace Markets
}  // namespace Jde
PROTOBUF_NAMESPACE_OPEN
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::ComboLeg* Arena::CreateMaybeMessage<::Jde::Markets::Proto::ComboLeg>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Contract* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Contract>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::DeltaNeutralContract* Arena::CreateMaybeMessage<::Jde::Markets::Proto::DeltaNeutralContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Jde {
namespace Markets {
namespace Proto {

// ===================================================================

class JDE_MARKETS_EXPORT ComboLeg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.ComboLeg) */ {
 public:
  ComboLeg();
  virtual ~ComboLeg();

  ComboLeg(const ComboLeg& from);
  ComboLeg(ComboLeg&& from) noexcept
    : ComboLeg() {
    *this = ::std::move(from);
  }

  inline ComboLeg& operator=(const ComboLeg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComboLeg& operator=(ComboLeg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComboLeg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComboLeg* internal_default_instance() {
    return reinterpret_cast<const ComboLeg*>(
               &_ComboLeg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComboLeg& a, ComboLeg& b) {
    a.Swap(&b);
  }
  inline void Swap(ComboLeg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComboLeg* New() const final {
    return CreateMaybeMessage<ComboLeg>(nullptr);
  }

  ComboLeg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComboLeg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComboLeg& from);
  void MergeFrom(const ComboLeg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComboLeg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.ComboLeg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ib_2eproto);
    return ::descriptor_table_ib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 3,
    kExchangeFieldNumber = 4,
    kDesignatedLocationFieldNumber = 7,
    kConIdFieldNumber = 1,
    kRatioFieldNumber = 2,
    kOpenCloseFieldNumber = 5,
    kShortSaleSlotFieldNumber = 6,
    kExemptCodeFieldNumber = 8,
  };
  // string Action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string Exchange = 4;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string DesignatedLocation = 7;
  void clear_designatedlocation();
  const std::string& designatedlocation() const;
  void set_designatedlocation(const std::string& value);
  void set_designatedlocation(std::string&& value);
  void set_designatedlocation(const char* value);
  void set_designatedlocation(const char* value, size_t size);
  std::string* mutable_designatedlocation();
  std::string* release_designatedlocation();
  void set_allocated_designatedlocation(std::string* designatedlocation);
  private:
  const std::string& _internal_designatedlocation() const;
  void _internal_set_designatedlocation(const std::string& value);
  std::string* _internal_mutable_designatedlocation();
  public:

  // uint32 ConId = 1;
  void clear_conid();
  ::PROTOBUF_NAMESPACE_ID::uint32 conid() const;
  void set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conid() const;
  void _internal_set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 Ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OpenClose = 5;
  void clear_openclose();
  ::PROTOBUF_NAMESPACE_ID::int32 openclose() const;
  void set_openclose(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_openclose() const;
  void _internal_set_openclose(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ShortSaleSlot = 6;
  void clear_shortsaleslot();
  ::PROTOBUF_NAMESPACE_ID::int32 shortsaleslot() const;
  void set_shortsaleslot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shortsaleslot() const;
  void _internal_set_shortsaleslot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ExemptCode = 8;
  void clear_exemptcode();
  ::PROTOBUF_NAMESPACE_ID::int32 exemptcode() const;
  void set_exemptcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exemptcode() const;
  void _internal_set_exemptcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.ComboLeg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr designatedlocation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 openclose_;
  ::PROTOBUF_NAMESPACE_ID::int32 shortsaleslot_;
  ::PROTOBUF_NAMESPACE_ID::int32 exemptcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ib_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT DeltaNeutralContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.DeltaNeutralContract) */ {
 public:
  DeltaNeutralContract();
  virtual ~DeltaNeutralContract();

  DeltaNeutralContract(const DeltaNeutralContract& from);
  DeltaNeutralContract(DeltaNeutralContract&& from) noexcept
    : DeltaNeutralContract() {
    *this = ::std::move(from);
  }

  inline DeltaNeutralContract& operator=(const DeltaNeutralContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaNeutralContract& operator=(DeltaNeutralContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeltaNeutralContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeltaNeutralContract* internal_default_instance() {
    return reinterpret_cast<const DeltaNeutralContract*>(
               &_DeltaNeutralContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeltaNeutralContract& a, DeltaNeutralContract& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaNeutralContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeltaNeutralContract* New() const final {
    return CreateMaybeMessage<DeltaNeutralContract>(nullptr);
  }

  DeltaNeutralContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeltaNeutralContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeltaNeutralContract& from);
  void MergeFrom(const DeltaNeutralContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaNeutralContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.DeltaNeutralContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ib_2eproto);
    return ::descriptor_table_ib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaFieldNumber = 2,
    kPriceFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // double Delta = 2;
  void clear_delta();
  double delta() const;
  void set_delta(double value);
  private:
  double _internal_delta() const;
  void _internal_set_delta(double value);
  public:

  // double Price = 3;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.DeltaNeutralContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double delta_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ib_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Contract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Contract) */ {
 public:
  Contract();
  virtual ~Contract();

  Contract(const Contract& from);
  Contract(Contract&& from) noexcept
    : Contract() {
    *this = ::std::move(from);
  }

  inline Contract& operator=(const Contract& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contract& operator=(Contract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Contract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contract* internal_default_instance() {
    return reinterpret_cast<const Contract*>(
               &_Contract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Contract& a, Contract& b) {
    a.Swap(&b);
  }
  inline void Swap(Contract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Contract* New() const final {
    return CreateMaybeMessage<Contract>(nullptr);
  }

  Contract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Contract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Contract& from);
  void MergeFrom(const Contract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Contract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ib_2eproto);
    return ::descriptor_table_ib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComboLegsFieldNumber = 17,
    kSymbolFieldNumber = 2,
    kSecTypeFieldNumber = 3,
    kLastTradeDateOrContractMonthFieldNumber = 4,
    kRightFieldNumber = 6,
    kMultiplierFieldNumber = 7,
    kExchangeFieldNumber = 8,
    kPrimaryExchangeFieldNumber = 9,
    kCurrencyFieldNumber = 10,
    kLocalSymbolFieldNumber = 11,
    kTradingClassFieldNumber = 12,
    kSecIdTypeFieldNumber = 14,
    kSecIdFieldNumber = 15,
    kComboLegsDescripFieldNumber = 16,
    kNameFieldNumber = 19,
    kDeltaNeutralFieldNumber = 18,
    kStrikeFieldNumber = 5,
    kIdFieldNumber = 1,
    kIncludeExpiredFieldNumber = 13,
    kFlagsFieldNumber = 20,
  };
  // repeated .Jde.Markets.Proto.ComboLeg ComboLegs = 17;
  int combolegs_size() const;
  private:
  int _internal_combolegs_size() const;
  public:
  void clear_combolegs();
  ::Jde::Markets::Proto::ComboLeg* mutable_combolegs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >*
      mutable_combolegs();
  private:
  const ::Jde::Markets::Proto::ComboLeg& _internal_combolegs(int index) const;
  ::Jde::Markets::Proto::ComboLeg* _internal_add_combolegs();
  public:
  const ::Jde::Markets::Proto::ComboLeg& combolegs(int index) const;
  ::Jde::Markets::Proto::ComboLeg* add_combolegs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >&
      combolegs() const;

  // string Symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string SecType = 3;
  void clear_sectype();
  const std::string& sectype() const;
  void set_sectype(const std::string& value);
  void set_sectype(std::string&& value);
  void set_sectype(const char* value);
  void set_sectype(const char* value, size_t size);
  std::string* mutable_sectype();
  std::string* release_sectype();
  void set_allocated_sectype(std::string* sectype);
  private:
  const std::string& _internal_sectype() const;
  void _internal_set_sectype(const std::string& value);
  std::string* _internal_mutable_sectype();
  public:

  // string LastTradeDateOrContractMonth = 4;
  void clear_lasttradedateorcontractmonth();
  const std::string& lasttradedateorcontractmonth() const;
  void set_lasttradedateorcontractmonth(const std::string& value);
  void set_lasttradedateorcontractmonth(std::string&& value);
  void set_lasttradedateorcontractmonth(const char* value);
  void set_lasttradedateorcontractmonth(const char* value, size_t size);
  std::string* mutable_lasttradedateorcontractmonth();
  std::string* release_lasttradedateorcontractmonth();
  void set_allocated_lasttradedateorcontractmonth(std::string* lasttradedateorcontractmonth);
  private:
  const std::string& _internal_lasttradedateorcontractmonth() const;
  void _internal_set_lasttradedateorcontractmonth(const std::string& value);
  std::string* _internal_mutable_lasttradedateorcontractmonth();
  public:

  // string Right = 6;
  void clear_right();
  const std::string& right() const;
  void set_right(const std::string& value);
  void set_right(std::string&& value);
  void set_right(const char* value);
  void set_right(const char* value, size_t size);
  std::string* mutable_right();
  std::string* release_right();
  void set_allocated_right(std::string* right);
  private:
  const std::string& _internal_right() const;
  void _internal_set_right(const std::string& value);
  std::string* _internal_mutable_right();
  public:

  // string Multiplier = 7;
  void clear_multiplier();
  const std::string& multiplier() const;
  void set_multiplier(const std::string& value);
  void set_multiplier(std::string&& value);
  void set_multiplier(const char* value);
  void set_multiplier(const char* value, size_t size);
  std::string* mutable_multiplier();
  std::string* release_multiplier();
  void set_allocated_multiplier(std::string* multiplier);
  private:
  const std::string& _internal_multiplier() const;
  void _internal_set_multiplier(const std::string& value);
  std::string* _internal_mutable_multiplier();
  public:

  // string Exchange = 8;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string PrimaryExchange = 9;
  void clear_primaryexchange();
  const std::string& primaryexchange() const;
  void set_primaryexchange(const std::string& value);
  void set_primaryexchange(std::string&& value);
  void set_primaryexchange(const char* value);
  void set_primaryexchange(const char* value, size_t size);
  std::string* mutable_primaryexchange();
  std::string* release_primaryexchange();
  void set_allocated_primaryexchange(std::string* primaryexchange);
  private:
  const std::string& _internal_primaryexchange() const;
  void _internal_set_primaryexchange(const std::string& value);
  std::string* _internal_mutable_primaryexchange();
  public:

  // string Currency = 10;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string LocalSymbol = 11;
  void clear_localsymbol();
  const std::string& localsymbol() const;
  void set_localsymbol(const std::string& value);
  void set_localsymbol(std::string&& value);
  void set_localsymbol(const char* value);
  void set_localsymbol(const char* value, size_t size);
  std::string* mutable_localsymbol();
  std::string* release_localsymbol();
  void set_allocated_localsymbol(std::string* localsymbol);
  private:
  const std::string& _internal_localsymbol() const;
  void _internal_set_localsymbol(const std::string& value);
  std::string* _internal_mutable_localsymbol();
  public:

  // string TradingClass = 12;
  void clear_tradingclass();
  const std::string& tradingclass() const;
  void set_tradingclass(const std::string& value);
  void set_tradingclass(std::string&& value);
  void set_tradingclass(const char* value);
  void set_tradingclass(const char* value, size_t size);
  std::string* mutable_tradingclass();
  std::string* release_tradingclass();
  void set_allocated_tradingclass(std::string* tradingclass);
  private:
  const std::string& _internal_tradingclass() const;
  void _internal_set_tradingclass(const std::string& value);
  std::string* _internal_mutable_tradingclass();
  public:

  // string SecIdType = 14;
  void clear_secidtype();
  const std::string& secidtype() const;
  void set_secidtype(const std::string& value);
  void set_secidtype(std::string&& value);
  void set_secidtype(const char* value);
  void set_secidtype(const char* value, size_t size);
  std::string* mutable_secidtype();
  std::string* release_secidtype();
  void set_allocated_secidtype(std::string* secidtype);
  private:
  const std::string& _internal_secidtype() const;
  void _internal_set_secidtype(const std::string& value);
  std::string* _internal_mutable_secidtype();
  public:

  // string SecId = 15;
  void clear_secid();
  const std::string& secid() const;
  void set_secid(const std::string& value);
  void set_secid(std::string&& value);
  void set_secid(const char* value);
  void set_secid(const char* value, size_t size);
  std::string* mutable_secid();
  std::string* release_secid();
  void set_allocated_secid(std::string* secid);
  private:
  const std::string& _internal_secid() const;
  void _internal_set_secid(const std::string& value);
  std::string* _internal_mutable_secid();
  public:

  // string ComboLegsDescrip = 16;
  void clear_combolegsdescrip();
  const std::string& combolegsdescrip() const;
  void set_combolegsdescrip(const std::string& value);
  void set_combolegsdescrip(std::string&& value);
  void set_combolegsdescrip(const char* value);
  void set_combolegsdescrip(const char* value, size_t size);
  std::string* mutable_combolegsdescrip();
  std::string* release_combolegsdescrip();
  void set_allocated_combolegsdescrip(std::string* combolegsdescrip);
  private:
  const std::string& _internal_combolegsdescrip() const;
  void _internal_set_combolegsdescrip(const std::string& value);
  std::string* _internal_mutable_combolegsdescrip();
  public:

  // string Name = 19;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Jde.Markets.Proto.DeltaNeutralContract DeltaNeutral = 18;
  bool has_deltaneutral() const;
  private:
  bool _internal_has_deltaneutral() const;
  public:
  void clear_deltaneutral();
  const ::Jde::Markets::Proto::DeltaNeutralContract& deltaneutral() const;
  ::Jde::Markets::Proto::DeltaNeutralContract* release_deltaneutral();
  ::Jde::Markets::Proto::DeltaNeutralContract* mutable_deltaneutral();
  void set_allocated_deltaneutral(::Jde::Markets::Proto::DeltaNeutralContract* deltaneutral);
  private:
  const ::Jde::Markets::Proto::DeltaNeutralContract& _internal_deltaneutral() const;
  ::Jde::Markets::Proto::DeltaNeutralContract* _internal_mutable_deltaneutral();
  public:

  // double Strike = 5;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool IncludeExpired = 13;
  void clear_includeexpired();
  bool includeexpired() const;
  void set_includeexpired(bool value);
  private:
  bool _internal_includeexpired() const;
  void _internal_set_includeexpired(bool value);
  public:

  // uint32 Flags = 20;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Contract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg > combolegs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sectype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lasttradedateorcontractmonth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr right_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multiplier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primaryexchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localsymbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingclass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secidtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combolegsdescrip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Jde::Markets::Proto::DeltaNeutralContract* deltaneutral_;
  double strike_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool includeexpired_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ib_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComboLeg

// uint32 ConId = 1;
inline void ComboLeg::clear_conid() {
  conid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComboLeg::_internal_conid() const {
  return conid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComboLeg::conid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.ConId)
  return _internal_conid();
}
inline void ComboLeg::_internal_set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  conid_ = value;
}
inline void ComboLeg::set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.ConId)
}

// int32 Ratio = 2;
inline void ComboLeg::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::ratio() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.Ratio)
  return _internal_ratio();
}
inline void ComboLeg::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void ComboLeg::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.Ratio)
}

// string Action = 3;
inline void ComboLeg::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComboLeg::action() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.Action)
  return _internal_action();
}
inline void ComboLeg::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.Action)
}
inline std::string* ComboLeg::mutable_action() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.ComboLeg.Action)
  return _internal_mutable_action();
}
inline const std::string& ComboLeg::_internal_action() const {
  return action_.GetNoArena();
}
inline void ComboLeg::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ComboLeg::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.ComboLeg.Action)
}
inline void ComboLeg::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.ComboLeg.Action)
}
inline void ComboLeg::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.ComboLeg.Action)
}
inline std::string* ComboLeg::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComboLeg::release_action() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.ComboLeg.Action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComboLeg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.ComboLeg.Action)
}

// string Exchange = 4;
inline void ComboLeg::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComboLeg::exchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.Exchange)
  return _internal_exchange();
}
inline void ComboLeg::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.Exchange)
}
inline std::string* ComboLeg::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.ComboLeg.Exchange)
  return _internal_mutable_exchange();
}
inline const std::string& ComboLeg::_internal_exchange() const {
  return exchange_.GetNoArena();
}
inline void ComboLeg::_internal_set_exchange(const std::string& value) {
  
  exchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ComboLeg::set_exchange(std::string&& value) {
  
  exchange_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.ComboLeg.Exchange)
}
inline void ComboLeg::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.ComboLeg.Exchange)
}
inline void ComboLeg::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.ComboLeg.Exchange)
}
inline std::string* ComboLeg::_internal_mutable_exchange() {
  
  return exchange_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComboLeg::release_exchange() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.ComboLeg.Exchange)
  
  return exchange_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComboLeg::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.ComboLeg.Exchange)
}

// int32 OpenClose = 5;
inline void ComboLeg::clear_openclose() {
  openclose_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_openclose() const {
  return openclose_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::openclose() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.OpenClose)
  return _internal_openclose();
}
inline void ComboLeg::_internal_set_openclose(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  openclose_ = value;
}
inline void ComboLeg::set_openclose(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_openclose(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.OpenClose)
}

// int32 ShortSaleSlot = 6;
inline void ComboLeg::clear_shortsaleslot() {
  shortsaleslot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_shortsaleslot() const {
  return shortsaleslot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::shortsaleslot() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.ShortSaleSlot)
  return _internal_shortsaleslot();
}
inline void ComboLeg::_internal_set_shortsaleslot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shortsaleslot_ = value;
}
inline void ComboLeg::set_shortsaleslot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shortsaleslot(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.ShortSaleSlot)
}

// string DesignatedLocation = 7;
inline void ComboLeg::clear_designatedlocation() {
  designatedlocation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComboLeg::designatedlocation() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
  return _internal_designatedlocation();
}
inline void ComboLeg::set_designatedlocation(const std::string& value) {
  _internal_set_designatedlocation(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
}
inline std::string* ComboLeg::mutable_designatedlocation() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
  return _internal_mutable_designatedlocation();
}
inline const std::string& ComboLeg::_internal_designatedlocation() const {
  return designatedlocation_.GetNoArena();
}
inline void ComboLeg::_internal_set_designatedlocation(const std::string& value) {
  
  designatedlocation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ComboLeg::set_designatedlocation(std::string&& value) {
  
  designatedlocation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
}
inline void ComboLeg::set_designatedlocation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  designatedlocation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
}
inline void ComboLeg::set_designatedlocation(const char* value, size_t size) {
  
  designatedlocation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
}
inline std::string* ComboLeg::_internal_mutable_designatedlocation() {
  
  return designatedlocation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComboLeg::release_designatedlocation() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
  
  return designatedlocation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComboLeg::set_allocated_designatedlocation(std::string* designatedlocation) {
  if (designatedlocation != nullptr) {
    
  } else {
    
  }
  designatedlocation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), designatedlocation);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.ComboLeg.DesignatedLocation)
}

// int32 ExemptCode = 8;
inline void ComboLeg::clear_exemptcode() {
  exemptcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_exemptcode() const {
  return exemptcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::exemptcode() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.ExemptCode)
  return _internal_exemptcode();
}
inline void ComboLeg::_internal_set_exemptcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exemptcode_ = value;
}
inline void ComboLeg::set_exemptcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exemptcode(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.ExemptCode)
}

// -------------------------------------------------------------------

// DeltaNeutralContract

// int32 Id = 1;
inline void DeltaNeutralContract::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeltaNeutralContract::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeltaNeutralContract::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.DeltaNeutralContract.Id)
  return _internal_id();
}
inline void DeltaNeutralContract::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeltaNeutralContract::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.DeltaNeutralContract.Id)
}

// double Delta = 2;
inline void DeltaNeutralContract::clear_delta() {
  delta_ = 0;
}
inline double DeltaNeutralContract::_internal_delta() const {
  return delta_;
}
inline double DeltaNeutralContract::delta() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.DeltaNeutralContract.Delta)
  return _internal_delta();
}
inline void DeltaNeutralContract::_internal_set_delta(double value) {
  
  delta_ = value;
}
inline void DeltaNeutralContract::set_delta(double value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.DeltaNeutralContract.Delta)
}

// double Price = 3;
inline void DeltaNeutralContract::clear_price() {
  price_ = 0;
}
inline double DeltaNeutralContract::_internal_price() const {
  return price_;
}
inline double DeltaNeutralContract::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.DeltaNeutralContract.Price)
  return _internal_price();
}
inline void DeltaNeutralContract::_internal_set_price(double value) {
  
  price_ = value;
}
inline void DeltaNeutralContract::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.DeltaNeutralContract.Price)
}

// -------------------------------------------------------------------

// Contract

// uint32 Id = 1;
inline void Contract::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Id)
  return _internal_id();
}
inline void Contract::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Contract::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Id)
}

// string Symbol = 2;
inline void Contract::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::symbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Symbol)
  return _internal_symbol();
}
inline void Contract::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Symbol)
}
inline std::string* Contract::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.Symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Contract::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void Contract::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.Symbol)
}
inline void Contract::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.Symbol)
}
inline void Contract::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.Symbol)
}
inline std::string* Contract::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_symbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.Symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.Symbol)
}

// string SecType = 3;
inline void Contract::clear_sectype() {
  sectype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::sectype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.SecType)
  return _internal_sectype();
}
inline void Contract::set_sectype(const std::string& value) {
  _internal_set_sectype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.SecType)
}
inline std::string* Contract::mutable_sectype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.SecType)
  return _internal_mutable_sectype();
}
inline const std::string& Contract::_internal_sectype() const {
  return sectype_.GetNoArena();
}
inline void Contract::_internal_set_sectype(const std::string& value) {
  
  sectype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_sectype(std::string&& value) {
  
  sectype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.SecType)
}
inline void Contract::set_sectype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sectype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.SecType)
}
inline void Contract::set_sectype(const char* value, size_t size) {
  
  sectype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.SecType)
}
inline std::string* Contract::_internal_mutable_sectype() {
  
  return sectype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_sectype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.SecType)
  
  return sectype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_sectype(std::string* sectype) {
  if (sectype != nullptr) {
    
  } else {
    
  }
  sectype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sectype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.SecType)
}

// string LastTradeDateOrContractMonth = 4;
inline void Contract::clear_lasttradedateorcontractmonth() {
  lasttradedateorcontractmonth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::lasttradedateorcontractmonth() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
  return _internal_lasttradedateorcontractmonth();
}
inline void Contract::set_lasttradedateorcontractmonth(const std::string& value) {
  _internal_set_lasttradedateorcontractmonth(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
}
inline std::string* Contract::mutable_lasttradedateorcontractmonth() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
  return _internal_mutable_lasttradedateorcontractmonth();
}
inline const std::string& Contract::_internal_lasttradedateorcontractmonth() const {
  return lasttradedateorcontractmonth_.GetNoArena();
}
inline void Contract::_internal_set_lasttradedateorcontractmonth(const std::string& value) {
  
  lasttradedateorcontractmonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_lasttradedateorcontractmonth(std::string&& value) {
  
  lasttradedateorcontractmonth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
}
inline void Contract::set_lasttradedateorcontractmonth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lasttradedateorcontractmonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
}
inline void Contract::set_lasttradedateorcontractmonth(const char* value, size_t size) {
  
  lasttradedateorcontractmonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
}
inline std::string* Contract::_internal_mutable_lasttradedateorcontractmonth() {
  
  return lasttradedateorcontractmonth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_lasttradedateorcontractmonth() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
  
  return lasttradedateorcontractmonth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_lasttradedateorcontractmonth(std::string* lasttradedateorcontractmonth) {
  if (lasttradedateorcontractmonth != nullptr) {
    
  } else {
    
  }
  lasttradedateorcontractmonth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lasttradedateorcontractmonth);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.LastTradeDateOrContractMonth)
}

// double Strike = 5;
inline void Contract::clear_strike() {
  strike_ = 0;
}
inline double Contract::_internal_strike() const {
  return strike_;
}
inline double Contract::strike() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Strike)
  return _internal_strike();
}
inline void Contract::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void Contract::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Strike)
}

// string Right = 6;
inline void Contract::clear_right() {
  right_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::right() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Right)
  return _internal_right();
}
inline void Contract::set_right(const std::string& value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Right)
}
inline std::string* Contract::mutable_right() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.Right)
  return _internal_mutable_right();
}
inline const std::string& Contract::_internal_right() const {
  return right_.GetNoArena();
}
inline void Contract::_internal_set_right(const std::string& value) {
  
  right_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_right(std::string&& value) {
  
  right_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.Right)
}
inline void Contract::set_right(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  right_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.Right)
}
inline void Contract::set_right(const char* value, size_t size) {
  
  right_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.Right)
}
inline std::string* Contract::_internal_mutable_right() {
  
  return right_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_right() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.Right)
  
  return right_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_right(std::string* right) {
  if (right != nullptr) {
    
  } else {
    
  }
  right_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.Right)
}

// string Multiplier = 7;
inline void Contract::clear_multiplier() {
  multiplier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::multiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Multiplier)
  return _internal_multiplier();
}
inline void Contract::set_multiplier(const std::string& value) {
  _internal_set_multiplier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Multiplier)
}
inline std::string* Contract::mutable_multiplier() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.Multiplier)
  return _internal_mutable_multiplier();
}
inline const std::string& Contract::_internal_multiplier() const {
  return multiplier_.GetNoArena();
}
inline void Contract::_internal_set_multiplier(const std::string& value) {
  
  multiplier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_multiplier(std::string&& value) {
  
  multiplier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.Multiplier)
}
inline void Contract::set_multiplier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  multiplier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.Multiplier)
}
inline void Contract::set_multiplier(const char* value, size_t size) {
  
  multiplier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.Multiplier)
}
inline std::string* Contract::_internal_mutable_multiplier() {
  
  return multiplier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_multiplier() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.Multiplier)
  
  return multiplier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_multiplier(std::string* multiplier) {
  if (multiplier != nullptr) {
    
  } else {
    
  }
  multiplier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multiplier);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.Multiplier)
}

// string Exchange = 8;
inline void Contract::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::exchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Exchange)
  return _internal_exchange();
}
inline void Contract::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Exchange)
}
inline std::string* Contract::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.Exchange)
  return _internal_mutable_exchange();
}
inline const std::string& Contract::_internal_exchange() const {
  return exchange_.GetNoArena();
}
inline void Contract::_internal_set_exchange(const std::string& value) {
  
  exchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_exchange(std::string&& value) {
  
  exchange_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.Exchange)
}
inline void Contract::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.Exchange)
}
inline void Contract::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.Exchange)
}
inline std::string* Contract::_internal_mutable_exchange() {
  
  return exchange_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_exchange() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.Exchange)
  
  return exchange_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.Exchange)
}

// string PrimaryExchange = 9;
inline void Contract::clear_primaryexchange() {
  primaryexchange_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::primaryexchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.PrimaryExchange)
  return _internal_primaryexchange();
}
inline void Contract::set_primaryexchange(const std::string& value) {
  _internal_set_primaryexchange(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.PrimaryExchange)
}
inline std::string* Contract::mutable_primaryexchange() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.PrimaryExchange)
  return _internal_mutable_primaryexchange();
}
inline const std::string& Contract::_internal_primaryexchange() const {
  return primaryexchange_.GetNoArena();
}
inline void Contract::_internal_set_primaryexchange(const std::string& value) {
  
  primaryexchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_primaryexchange(std::string&& value) {
  
  primaryexchange_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.PrimaryExchange)
}
inline void Contract::set_primaryexchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primaryexchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.PrimaryExchange)
}
inline void Contract::set_primaryexchange(const char* value, size_t size) {
  
  primaryexchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.PrimaryExchange)
}
inline std::string* Contract::_internal_mutable_primaryexchange() {
  
  return primaryexchange_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_primaryexchange() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.PrimaryExchange)
  
  return primaryexchange_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_primaryexchange(std::string* primaryexchange) {
  if (primaryexchange != nullptr) {
    
  } else {
    
  }
  primaryexchange_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primaryexchange);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.PrimaryExchange)
}

// string Currency = 10;
inline void Contract::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Currency)
  return _internal_currency();
}
inline void Contract::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Currency)
}
inline std::string* Contract::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.Currency)
  return _internal_mutable_currency();
}
inline const std::string& Contract::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void Contract::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.Currency)
}
inline void Contract::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.Currency)
}
inline void Contract::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.Currency)
}
inline std::string* Contract::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_currency() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.Currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.Currency)
}

// string LocalSymbol = 11;
inline void Contract::clear_localsymbol() {
  localsymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::localsymbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.LocalSymbol)
  return _internal_localsymbol();
}
inline void Contract::set_localsymbol(const std::string& value) {
  _internal_set_localsymbol(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.LocalSymbol)
}
inline std::string* Contract::mutable_localsymbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.LocalSymbol)
  return _internal_mutable_localsymbol();
}
inline const std::string& Contract::_internal_localsymbol() const {
  return localsymbol_.GetNoArena();
}
inline void Contract::_internal_set_localsymbol(const std::string& value) {
  
  localsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_localsymbol(std::string&& value) {
  
  localsymbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.LocalSymbol)
}
inline void Contract::set_localsymbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  localsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.LocalSymbol)
}
inline void Contract::set_localsymbol(const char* value, size_t size) {
  
  localsymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.LocalSymbol)
}
inline std::string* Contract::_internal_mutable_localsymbol() {
  
  return localsymbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_localsymbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.LocalSymbol)
  
  return localsymbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_localsymbol(std::string* localsymbol) {
  if (localsymbol != nullptr) {
    
  } else {
    
  }
  localsymbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localsymbol);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.LocalSymbol)
}

// string TradingClass = 12;
inline void Contract::clear_tradingclass() {
  tradingclass_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::tradingclass() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.TradingClass)
  return _internal_tradingclass();
}
inline void Contract::set_tradingclass(const std::string& value) {
  _internal_set_tradingclass(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.TradingClass)
}
inline std::string* Contract::mutable_tradingclass() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.TradingClass)
  return _internal_mutable_tradingclass();
}
inline const std::string& Contract::_internal_tradingclass() const {
  return tradingclass_.GetNoArena();
}
inline void Contract::_internal_set_tradingclass(const std::string& value) {
  
  tradingclass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_tradingclass(std::string&& value) {
  
  tradingclass_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.TradingClass)
}
inline void Contract::set_tradingclass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingclass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.TradingClass)
}
inline void Contract::set_tradingclass(const char* value, size_t size) {
  
  tradingclass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.TradingClass)
}
inline std::string* Contract::_internal_mutable_tradingclass() {
  
  return tradingclass_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_tradingclass() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.TradingClass)
  
  return tradingclass_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_tradingclass(std::string* tradingclass) {
  if (tradingclass != nullptr) {
    
  } else {
    
  }
  tradingclass_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingclass);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.TradingClass)
}

// bool IncludeExpired = 13;
inline void Contract::clear_includeexpired() {
  includeexpired_ = false;
}
inline bool Contract::_internal_includeexpired() const {
  return includeexpired_;
}
inline bool Contract::includeexpired() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.IncludeExpired)
  return _internal_includeexpired();
}
inline void Contract::_internal_set_includeexpired(bool value) {
  
  includeexpired_ = value;
}
inline void Contract::set_includeexpired(bool value) {
  _internal_set_includeexpired(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.IncludeExpired)
}

// string SecIdType = 14;
inline void Contract::clear_secidtype() {
  secidtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::secidtype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.SecIdType)
  return _internal_secidtype();
}
inline void Contract::set_secidtype(const std::string& value) {
  _internal_set_secidtype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.SecIdType)
}
inline std::string* Contract::mutable_secidtype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.SecIdType)
  return _internal_mutable_secidtype();
}
inline const std::string& Contract::_internal_secidtype() const {
  return secidtype_.GetNoArena();
}
inline void Contract::_internal_set_secidtype(const std::string& value) {
  
  secidtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_secidtype(std::string&& value) {
  
  secidtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.SecIdType)
}
inline void Contract::set_secidtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secidtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.SecIdType)
}
inline void Contract::set_secidtype(const char* value, size_t size) {
  
  secidtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.SecIdType)
}
inline std::string* Contract::_internal_mutable_secidtype() {
  
  return secidtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_secidtype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.SecIdType)
  
  return secidtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_secidtype(std::string* secidtype) {
  if (secidtype != nullptr) {
    
  } else {
    
  }
  secidtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secidtype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.SecIdType)
}

// string SecId = 15;
inline void Contract::clear_secid() {
  secid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::secid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.SecId)
  return _internal_secid();
}
inline void Contract::set_secid(const std::string& value) {
  _internal_set_secid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.SecId)
}
inline std::string* Contract::mutable_secid() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.SecId)
  return _internal_mutable_secid();
}
inline const std::string& Contract::_internal_secid() const {
  return secid_.GetNoArena();
}
inline void Contract::_internal_set_secid(const std::string& value) {
  
  secid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_secid(std::string&& value) {
  
  secid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.SecId)
}
inline void Contract::set_secid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.SecId)
}
inline void Contract::set_secid(const char* value, size_t size) {
  
  secid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.SecId)
}
inline std::string* Contract::_internal_mutable_secid() {
  
  return secid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_secid() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.SecId)
  
  return secid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_secid(std::string* secid) {
  if (secid != nullptr) {
    
  } else {
    
  }
  secid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secid);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.SecId)
}

// string ComboLegsDescrip = 16;
inline void Contract::clear_combolegsdescrip() {
  combolegsdescrip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::combolegsdescrip() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.ComboLegsDescrip)
  return _internal_combolegsdescrip();
}
inline void Contract::set_combolegsdescrip(const std::string& value) {
  _internal_set_combolegsdescrip(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.ComboLegsDescrip)
}
inline std::string* Contract::mutable_combolegsdescrip() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.ComboLegsDescrip)
  return _internal_mutable_combolegsdescrip();
}
inline const std::string& Contract::_internal_combolegsdescrip() const {
  return combolegsdescrip_.GetNoArena();
}
inline void Contract::_internal_set_combolegsdescrip(const std::string& value) {
  
  combolegsdescrip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_combolegsdescrip(std::string&& value) {
  
  combolegsdescrip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.ComboLegsDescrip)
}
inline void Contract::set_combolegsdescrip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  combolegsdescrip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.ComboLegsDescrip)
}
inline void Contract::set_combolegsdescrip(const char* value, size_t size) {
  
  combolegsdescrip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.ComboLegsDescrip)
}
inline std::string* Contract::_internal_mutable_combolegsdescrip() {
  
  return combolegsdescrip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_combolegsdescrip() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.ComboLegsDescrip)
  
  return combolegsdescrip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_combolegsdescrip(std::string* combolegsdescrip) {
  if (combolegsdescrip != nullptr) {
    
  } else {
    
  }
  combolegsdescrip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), combolegsdescrip);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.ComboLegsDescrip)
}

// repeated .Jde.Markets.Proto.ComboLeg ComboLegs = 17;
inline int Contract::_internal_combolegs_size() const {
  return combolegs_.size();
}
inline int Contract::combolegs_size() const {
  return _internal_combolegs_size();
}
inline void Contract::clear_combolegs() {
  combolegs_.Clear();
}
inline ::Jde::Markets::Proto::ComboLeg* Contract::mutable_combolegs(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.ComboLegs)
  return combolegs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >*
Contract::mutable_combolegs() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Contract.ComboLegs)
  return &combolegs_;
}
inline const ::Jde::Markets::Proto::ComboLeg& Contract::_internal_combolegs(int index) const {
  return combolegs_.Get(index);
}
inline const ::Jde::Markets::Proto::ComboLeg& Contract::combolegs(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.ComboLegs)
  return _internal_combolegs(index);
}
inline ::Jde::Markets::Proto::ComboLeg* Contract::_internal_add_combolegs() {
  return combolegs_.Add();
}
inline ::Jde::Markets::Proto::ComboLeg* Contract::add_combolegs() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Contract.ComboLegs)
  return _internal_add_combolegs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >&
Contract::combolegs() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Contract.ComboLegs)
  return combolegs_;
}

// .Jde.Markets.Proto.DeltaNeutralContract DeltaNeutral = 18;
inline bool Contract::_internal_has_deltaneutral() const {
  return this != internal_default_instance() && deltaneutral_ != nullptr;
}
inline bool Contract::has_deltaneutral() const {
  return _internal_has_deltaneutral();
}
inline void Contract::clear_deltaneutral() {
  if (GetArenaNoVirtual() == nullptr && deltaneutral_ != nullptr) {
    delete deltaneutral_;
  }
  deltaneutral_ = nullptr;
}
inline const ::Jde::Markets::Proto::DeltaNeutralContract& Contract::_internal_deltaneutral() const {
  const ::Jde::Markets::Proto::DeltaNeutralContract* p = deltaneutral_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Jde::Markets::Proto::DeltaNeutralContract*>(
      &::Jde::Markets::Proto::_DeltaNeutralContract_default_instance_);
}
inline const ::Jde::Markets::Proto::DeltaNeutralContract& Contract::deltaneutral() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.DeltaNeutral)
  return _internal_deltaneutral();
}
inline ::Jde::Markets::Proto::DeltaNeutralContract* Contract::release_deltaneutral() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.DeltaNeutral)
  
  ::Jde::Markets::Proto::DeltaNeutralContract* temp = deltaneutral_;
  deltaneutral_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::DeltaNeutralContract* Contract::_internal_mutable_deltaneutral() {
  
  if (deltaneutral_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::DeltaNeutralContract>(GetArenaNoVirtual());
    deltaneutral_ = p;
  }
  return deltaneutral_;
}
inline ::Jde::Markets::Proto::DeltaNeutralContract* Contract::mutable_deltaneutral() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.DeltaNeutral)
  return _internal_mutable_deltaneutral();
}
inline void Contract::set_allocated_deltaneutral(::Jde::Markets::Proto::DeltaNeutralContract* deltaneutral) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete deltaneutral_;
  }
  if (deltaneutral) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deltaneutral = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deltaneutral, submessage_arena);
    }
    
  } else {
    
  }
  deltaneutral_ = deltaneutral;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.DeltaNeutral)
}

// string Name = 19;
inline void Contract::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contract::name() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Name)
  return _internal_name();
}
inline void Contract::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Name)
}
inline std::string* Contract::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.Name)
  return _internal_mutable_name();
}
inline const std::string& Contract::_internal_name() const {
  return name_.GetNoArena();
}
inline void Contract::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contract::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Contract.Name)
}
inline void Contract::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Contract.Name)
}
inline void Contract::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Contract.Name)
}
inline std::string* Contract::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contract::release_name() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contract::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.Name)
}

// uint32 Flags = 20;
inline void Contract::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::flags() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.Flags)
  return _internal_flags();
}
inline void Contract::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void Contract::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.Flags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Markets
}  // namespace Jde

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ib_2eproto
