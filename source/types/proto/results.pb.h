// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: results.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_results_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_results_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "ib.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_results_2eproto JDE_MARKETS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct JDE_MARKETS_EXPORT TableStruct_results_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_results_2eproto;
namespace Jde {
namespace Markets {
namespace Proto {
namespace Results {
class AccountList;
class AccountListDefaultTypeInternal;
JDE_MARKETS_EXPORT extern AccountListDefaultTypeInternal _AccountList_default_instance_;
class AccountUpdate;
class AccountUpdateDefaultTypeInternal;
JDE_MARKETS_EXPORT extern AccountUpdateDefaultTypeInternal _AccountUpdate_default_instance_;
class AccountUpdateMulti;
class AccountUpdateMultiDefaultTypeInternal;
JDE_MARKETS_EXPORT extern AccountUpdateMultiDefaultTypeInternal _AccountUpdateMulti_default_instance_;
class Bar;
class BarDefaultTypeInternal;
JDE_MARKETS_EXPORT extern BarDefaultTypeInternal _Bar_default_instance_;
class ContractDetails;
class ContractDetailsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ContractDetailsDefaultTypeInternal _ContractDetails_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ErrorDefaultTypeInternal _Error_default_instance_;
class Flex;
class FlexDefaultTypeInternal;
JDE_MARKETS_EXPORT extern FlexDefaultTypeInternal _Flex_default_instance_;
class HistoricalData;
class HistoricalDataDefaultTypeInternal;
JDE_MARKETS_EXPORT extern HistoricalDataDefaultTypeInternal _HistoricalData_default_instance_;
class MessageUnion;
class MessageUnionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern MessageUnionDefaultTypeInternal _MessageUnion_default_instance_;
class MessageValue;
class MessageValueDefaultTypeInternal;
JDE_MARKETS_EXPORT extern MessageValueDefaultTypeInternal _MessageValue_default_instance_;
class Option;
class OptionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionDefaultTypeInternal _Option_default_instance_;
class OptionDay;
class OptionDayDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionDayDefaultTypeInternal _OptionDay_default_instance_;
class OptionValues;
class OptionValuesDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionValuesDefaultTypeInternal _OptionValues_default_instance_;
class Order;
class OrderDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OrderDefaultTypeInternal _Order_default_instance_;
class PortfolioUpdate;
class PortfolioUpdateDefaultTypeInternal;
JDE_MARKETS_EXPORT extern PortfolioUpdateDefaultTypeInternal _PortfolioUpdate_default_instance_;
class Position;
class PositionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern PositionDefaultTypeInternal _Position_default_instance_;
class StringResult;
class StringResultDefaultTypeInternal;
JDE_MARKETS_EXPORT extern StringResultDefaultTypeInternal _StringResult_default_instance_;
class TagValue;
class TagValueDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TagValueDefaultTypeInternal _TagValue_default_instance_;
class TickAttrib;
class TickAttribDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickAttribDefaultTypeInternal _TickAttrib_default_instance_;
class TickGeneric;
class TickGenericDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickGenericDefaultTypeInternal _TickGeneric_default_instance_;
class TickPrice;
class TickPriceDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickPriceDefaultTypeInternal _TickPrice_default_instance_;
class TickSize;
class TickSizeDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickSizeDefaultTypeInternal _TickSize_default_instance_;
class TickString;
class TickStringDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickStringDefaultTypeInternal _TickString_default_instance_;
class Trade;
class TradeDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TradeDefaultTypeInternal _Trade_default_instance_;
class Transmission;
class TransmissionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TransmissionDefaultTypeInternal _Transmission_default_instance_;
}  // namespace Results
}  // namespace Proto
}  // namespace Markets
}  // namespace Jde
PROTOBUF_NAMESPACE_OPEN
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::AccountList* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::AccountList>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::AccountUpdate* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::AccountUpdate>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::AccountUpdateMulti* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::AccountUpdateMulti>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Bar* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Bar>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::ContractDetails* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::ContractDetails>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Error* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Error>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Flex* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Flex>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::HistoricalData* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::HistoricalData>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::MessageUnion* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::MessageUnion>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::MessageValue* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::MessageValue>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Option* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Option>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OptionDay* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OptionDay>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OptionValues* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OptionValues>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Order* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Order>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::PortfolioUpdate* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::PortfolioUpdate>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Position* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Position>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::StringResult* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::StringResult>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TagValue* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TagValue>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickAttrib* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickAttrib>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickGeneric* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickGeneric>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickPrice* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickPrice>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickSize* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickSize>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickString* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickString>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Trade* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Trade>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Transmission* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Transmission>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Jde {
namespace Markets {
namespace Proto {
namespace Results {

enum ETickType : int {
  BidSize = 0,
  BidPrice = 1,
  AskPrice = 2,
  AskSize = 3,
  LastPrice = 4,
  LastSize = 5,
  High = 6,
  Low = 7,
  Volume = 8,
  ClosePrice = 9,
  BID_OPTION_COMPUTATION = 10,
  ASK_OPTION_COMPUTATION = 11,
  LAST_OPTION_COMPUTATION = 12,
  MODEL_OPTION = 13,
  OpenTick = 14,
  LOW_13_WEEK = 15,
  HIGH_13_WEEK = 16,
  LOW_26_WEEK = 17,
  HIGH_26_WEEK = 18,
  LOW_52_WEEK = 19,
  HIGH_52_WEEK = 20,
  AVG_VOLUME = 21,
  OPEN_INTEREST = 22,
  OPTION_HISTORICAL_VOL = 23,
  OPTION_IMPLIED_VOL = 24,
  OPTION_BID_EXCH = 25,
  OPTION_ASK_EXCH = 26,
  OPTION_CALL_OPEN_INTEREST = 27,
  OPTION_PUT_OPEN_INTEREST = 28,
  OPTION_CALL_VOLUME = 29,
  OPTION_PUT_VOLUME = 30,
  INDEX_FUTURE_PREMIUM = 31,
  BidExchange = 32,
  AskExchange = 33,
  AUCTION_VOLUME = 34,
  AUCTION_PRICE = 35,
  AUCTION_IMBALANCE = 36,
  MARK_PRICE = 37,
  BID_EFP_COMPUTATION = 38,
  ASK_EFP_COMPUTATION = 39,
  LAST_EFP_COMPUTATION = 40,
  OPEN_EFP_COMPUTATION = 41,
  HIGH_EFP_COMPUTATION = 42,
  LOW_EFP_COMPUTATION = 43,
  CLOSE_EFP_COMPUTATION = 44,
  LastTimestamp = 45,
  SHORTABLE = 46,
  FUNDAMENTAL_RATIOS = 47,
  RT_VOLUME = 48,
  Halted = 49,
  BID_YIELD = 50,
  ASK_YIELD = 51,
  LAST_YIELD = 52,
  CUST_OPTION_COMPUTATION = 53,
  TRADE_COUNT = 54,
  TRADE_RATE = 55,
  VOLUME_RATE = 56,
  LAST_RTH_TRADE = 57,
  RT_HISTORICAL_VOL = 58,
  IB_DIVIDENDS = 59,
  BOND_FACTOR_MULTIPLIER = 60,
  REGULATORY_IMBALANCE = 61,
  NEWS_TICK = 62,
  SHORT_TERM_VOLUME_3_MIN = 63,
  SHORT_TERM_VOLUME_5_MIN = 64,
  SHORT_TERM_VOLUME_10_MIN = 65,
  DELAYED_BID = 66,
  DELAYED_ASK = 67,
  DELAYED_LAST = 68,
  DELAYED_BID_SIZE = 69,
  DELAYED_ASK_SIZE = 70,
  DELAYED_LAST_SIZE = 71,
  DELAYED_HIGH = 72,
  DELAYED_LOW = 73,
  DELAYED_VOLUME = 74,
  DELAYED_CLOSE = 75,
  DELAYED_OPEN = 76,
  RT_TRD_VOLUME = 77,
  CREDITMAN_MARK_PRICE = 78,
  CREDITMAN_SLOW_MARK_PRICE = 79,
  DELAYED_BID_OPTION_COMPUTATION = 80,
  DELAYED_ASK_OPTION_COMPUTATION = 81,
  DELAYED_LAST_OPTION_COMPUTATION = 82,
  DELAYED_MODEL_OPTION_COMPUTATION = 83,
  LastExchange = 84,
  LAST_REG_TIME = 85,
  FUTURES_OPEN_INTEREST = 86,
  AVG_OPT_VOLUME = 87,
  DELAYED_LAST_TIMESTAMP = 88,
  SHORTABLE_SHARES = 89,
  NOT_SET = 90,
  ETickType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ETickType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool ETickType_IsValid(int value);
constexpr ETickType ETickType_MIN = BidSize;
constexpr ETickType ETickType_MAX = NOT_SET;
constexpr int ETickType_ARRAYSIZE = ETickType_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETickType_descriptor();
template<typename T>
inline const std::string& ETickType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETickType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETickType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETickType_descriptor(), enum_t_value);
}
inline bool ETickType_Parse(
    const std::string& name, ETickType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETickType>(
    ETickType_descriptor(), name, value);
}
enum EResults : int {
  Accept = 0,
  MultiEnd = -1,
  TickPriceMessage = 1,
  TickSizeMessage = 2,
  OrderStatus = 3,
  ErrorMessage = 4,
  OpenOrder = 5,
  ACCT_VALUE = 6,
  PORTFOLIO_VALUE = 7,
  ACCT_UPDATE_TIME = 8,
  NextValidId = 9,
  CONTRACT_DATA = 10,
  ExecutionData = 11,
  MARKET_DEPTH = 12,
  MARKET_DEPTH_L2 = 13,
  NEWS_BULLETINS = 14,
  ManagedAccounts = 15,
  RECEIVE_FA = 16,
  HistoricalData_ = 17,
  BOND_CONTRACT_DATA = 18,
  SCANNER_PARAMETERS = 19,
  SCANNER_DATA = 20,
  TICK_OPTION_COMPUTATION = 21,
  TickGenericMessage = 45,
  TickStringMessage = 46,
  TICK_EFP = 47,
  CurrentTime = 49,
  RealTimeBars = 50,
  FUNDAMENTAL_DATA = 51,
  ContractDataEnd = 52,
  OPEN_ORDER_END = 53,
  ACCT_DOWNLOAD_END = 54,
  EXECUTION_DATA_END = 55,
  DELTA_NEUTRAL_VALIDATION = 56,
  TickSnapshotEnd = 57,
  MarketDataType = 58,
  COMMISSION_REPORT = 59,
  PositionData = 61,
  PositionEnd = 62,
  ACCOUNT_SUMMARY = 63,
  ACCOUNT_SUMMARY_END = 64,
  VERIFY_MESSAGE_API = 65,
  VERIFY_COMPLETED = 66,
  DISPLAY_GROUP_LIST = 67,
  DISPLAY_GROUP_UPDATED = 68,
  VERIFY_AND_AUTH_MESSAGE_API = 69,
  VERIFY_AND_AUTH_COMPLETED = 70,
  PositionMulti = 71,
  PositionMultiEnd = 72,
  AccountUpdateMulti_ = 73,
  ACCOUNT_UPDATE_MULTI_END = 74,
  SECURITY_DEFINITION_OPTION_PARAMETER = 75,
  SECURITY_DEFINITION_OPTION_PARAMETER_END = 76,
  SOFT_DOLLAR_TIERS = 77,
  FAMILY_CODES = 78,
  SYMBOL_SAMPLES = 79,
  MKT_DEPTH_EXCHANGES = 80,
  TickRequiredParams = 81,
  SMART_COMPONENTS = 82,
  NEWS_ARTICLE = 83,
  TICK_NEWS = 84,
  NEWS_PROVIDERS = 85,
  HISTORICAL_NEWS = 86,
  HISTORICAL_NEWS_END = 87,
  HEAD_TIMESTAMP = 88,
  HISTOGRAM_DATA = 89,
  HISTORICAL_DATA_UPDATE = 90,
  REROUTE_MKT_DATA_REQ = 91,
  REROUTE_MKT_DEPTH_REQ = 92,
  MARKET_RULE = 93,
  PNL = 94,
  PNL_SINGLE = 95,
  HISTORICAL_TICKS = 96,
  HISTORICAL_TICKS_BID_ASK = 97,
  HISTORICAL_TICKS_LAST = 98,
  TICK_BY_TICK = 99,
  EResults_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EResults_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool EResults_IsValid(int value);
constexpr EResults EResults_MIN = MultiEnd;
constexpr EResults EResults_MAX = TICK_BY_TICK;
constexpr int EResults_ARRAYSIZE = EResults_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EResults_descriptor();
template<typename T>
inline const std::string& EResults_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EResults>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EResults_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EResults_descriptor(), enum_t_value);
}
inline bool EResults_Parse(
    const std::string& name, EResults* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EResults>(
    EResults_descriptor(), name, value);
}
// ===================================================================

class JDE_MARKETS_EXPORT MessageValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.MessageValue) */ {
 public:
  MessageValue();
  virtual ~MessageValue();

  MessageValue(const MessageValue& from);
  MessageValue(MessageValue&& from) noexcept
    : MessageValue() {
    *this = ::std::move(from);
  }

  inline MessageValue& operator=(const MessageValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageValue& operator=(MessageValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageValue& default_instance();

  enum ValueCase {
    kStringValue = 2,
    kIntValue = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageValue* internal_default_instance() {
    return reinterpret_cast<const MessageValue*>(
               &_MessageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageValue& a, MessageValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageValue* New() const final {
    return CreateMaybeMessage<MessageValue>(nullptr);
  }

  MessageValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageValue& from);
  void MergeFrom(const MessageValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.MessageValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStringValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
  };
  // .Jde.Markets.Proto.Results.EResults Type = 1;
  void clear_type();
  ::Jde::Markets::Proto::Results::EResults type() const;
  void set_type(::Jde::Markets::Proto::Results::EResults value);
  private:
  ::Jde::Markets::Proto::Results::EResults _internal_type() const;
  void _internal_set_type(::Jde::Markets::Proto::Results::EResults value);
  public:

  // string StringValue = 2;
  private:
  bool _internal_has_stringvalue() const;
  public:
  void clear_stringvalue();
  const std::string& stringvalue() const;
  void set_stringvalue(const std::string& value);
  void set_stringvalue(std::string&& value);
  void set_stringvalue(const char* value);
  void set_stringvalue(const char* value, size_t size);
  std::string* mutable_stringvalue();
  std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // int32 IntValue = 3;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 intvalue() const;
  void set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intvalue() const;
  void _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.MessageValue)
 private:
  class _Internal;
  void set_has_stringvalue();
  void set_has_intvalue();

  inline bool has_Value() const;
  inline void clear_has_Value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
    ::PROTOBUF_NAMESPACE_ID::int32 intvalue_;
  } Value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT StringResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.StringResult) */ {
 public:
  StringResult();
  virtual ~StringResult();

  StringResult(const StringResult& from);
  StringResult(StringResult&& from) noexcept
    : StringResult() {
    *this = ::std::move(from);
  }

  inline StringResult& operator=(const StringResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringResult& operator=(StringResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringResult* internal_default_instance() {
    return reinterpret_cast<const StringResult*>(
               &_StringResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringResult& a, StringResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StringResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringResult* New() const final {
    return CreateMaybeMessage<StringResult>(nullptr);
  }

  StringResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringResult& from);
  void MergeFrom(const StringResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.StringResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kTypeFieldNumber = 1,
    kRequestIdFieldNumber = 2,
  };
  // string Value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .Jde.Markets.Proto.Results.EResults Type = 1;
  void clear_type();
  ::Jde::Markets::Proto::Results::EResults type() const;
  void set_type(::Jde::Markets::Proto::Results::EResults value);
  private:
  ::Jde::Markets::Proto::Results::EResults _internal_type() const;
  void _internal_set_type(::Jde::Markets::Proto::Results::EResults value);
  public:

  // int32 RequestId = 2;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.StringResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TagValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TagValue) */ {
 public:
  TagValue();
  virtual ~TagValue();

  TagValue(const TagValue& from);
  TagValue(TagValue&& from) noexcept
    : TagValue() {
    *this = ::std::move(from);
  }

  inline TagValue& operator=(const TagValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagValue& operator=(TagValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagValue* internal_default_instance() {
    return reinterpret_cast<const TagValue*>(
               &_TagValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TagValue& a, TagValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TagValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagValue* New() const final {
    return CreateMaybeMessage<TagValue>(nullptr);
  }

  TagValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagValue& from);
  void MergeFrom(const TagValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TagValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string Value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TagValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT ContractDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.ContractDetails) */ {
 public:
  ContractDetails();
  virtual ~ContractDetails();

  ContractDetails(const ContractDetails& from);
  ContractDetails(ContractDetails&& from) noexcept
    : ContractDetails() {
    *this = ::std::move(from);
  }

  inline ContractDetails& operator=(const ContractDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractDetails& operator=(ContractDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractDetails* internal_default_instance() {
    return reinterpret_cast<const ContractDetails*>(
               &_ContractDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContractDetails& a, ContractDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractDetails* New() const final {
    return CreateMaybeMessage<ContractDetails>(nullptr);
  }

  ContractDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractDetails& from);
  void MergeFrom(const ContractDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.ContractDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecIdListFieldNumber = 26,
    kMarketNameFieldNumber = 3,
    kOrderTypesFieldNumber = 5,
    kValidExchangesFieldNumber = 6,
    kLongNameFieldNumber = 9,
    kContractMonthFieldNumber = 10,
    kIndustryFieldNumber = 11,
    kCategoryFieldNumber = 12,
    kSubcategoryFieldNumber = 13,
    kTimeZoneIdFieldNumber = 14,
    kTradingHoursFieldNumber = 15,
    kLiquidHoursFieldNumber = 16,
    kEvRuleFieldNumber = 17,
    kUnderSymbolFieldNumber = 21,
    kUnderSecTypeFieldNumber = 22,
    kMarketRuleIdsFieldNumber = 23,
    kRealExpirationDateFieldNumber = 24,
    kLastTradeTimeFieldNumber = 25,
    kCusipFieldNumber = 27,
    kRatingsFieldNumber = 28,
    kDescAppendFieldNumber = 29,
    kBondTypeFieldNumber = 30,
    kCouponTypeFieldNumber = 31,
    kMaturityFieldNumber = 36,
    kIssueDateFieldNumber = 37,
    kNextOptionDateFieldNumber = 38,
    kNextOptionTypeFieldNumber = 39,
    kNotesFieldNumber = 41,
    kContractFieldNumber = 2,
    kMinTickFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kUnderConIdFieldNumber = 8,
    kPriceMagnifierFieldNumber = 7,
    kEvMultiplierFieldNumber = 18,
    kMdSizeMultiplierFieldNumber = 19,
    kAggGroupFieldNumber = 20,
    kCouponFieldNumber = 34,
    kCallableFieldNumber = 32,
    kPutableFieldNumber = 33,
    kConvertibleFieldNumber = 35,
    kNextOptionPartialFieldNumber = 40,
  };
  // repeated .Jde.Markets.Proto.Results.TagValue secIdList = 26;
  int secidlist_size() const;
  private:
  int _internal_secidlist_size() const;
  public:
  void clear_secidlist();
  ::Jde::Markets::Proto::Results::TagValue* mutable_secidlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >*
      mutable_secidlist();
  private:
  const ::Jde::Markets::Proto::Results::TagValue& _internal_secidlist(int index) const;
  ::Jde::Markets::Proto::Results::TagValue* _internal_add_secidlist();
  public:
  const ::Jde::Markets::Proto::Results::TagValue& secidlist(int index) const;
  ::Jde::Markets::Proto::Results::TagValue* add_secidlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >&
      secidlist() const;

  // string MarketName = 3;
  void clear_marketname();
  const std::string& marketname() const;
  void set_marketname(const std::string& value);
  void set_marketname(std::string&& value);
  void set_marketname(const char* value);
  void set_marketname(const char* value, size_t size);
  std::string* mutable_marketname();
  std::string* release_marketname();
  void set_allocated_marketname(std::string* marketname);
  private:
  const std::string& _internal_marketname() const;
  void _internal_set_marketname(const std::string& value);
  std::string* _internal_mutable_marketname();
  public:

  // string OrderTypes = 5;
  void clear_ordertypes();
  const std::string& ordertypes() const;
  void set_ordertypes(const std::string& value);
  void set_ordertypes(std::string&& value);
  void set_ordertypes(const char* value);
  void set_ordertypes(const char* value, size_t size);
  std::string* mutable_ordertypes();
  std::string* release_ordertypes();
  void set_allocated_ordertypes(std::string* ordertypes);
  private:
  const std::string& _internal_ordertypes() const;
  void _internal_set_ordertypes(const std::string& value);
  std::string* _internal_mutable_ordertypes();
  public:

  // string ValidExchanges = 6;
  void clear_validexchanges();
  const std::string& validexchanges() const;
  void set_validexchanges(const std::string& value);
  void set_validexchanges(std::string&& value);
  void set_validexchanges(const char* value);
  void set_validexchanges(const char* value, size_t size);
  std::string* mutable_validexchanges();
  std::string* release_validexchanges();
  void set_allocated_validexchanges(std::string* validexchanges);
  private:
  const std::string& _internal_validexchanges() const;
  void _internal_set_validexchanges(const std::string& value);
  std::string* _internal_mutable_validexchanges();
  public:

  // string LongName = 9;
  void clear_longname();
  const std::string& longname() const;
  void set_longname(const std::string& value);
  void set_longname(std::string&& value);
  void set_longname(const char* value);
  void set_longname(const char* value, size_t size);
  std::string* mutable_longname();
  std::string* release_longname();
  void set_allocated_longname(std::string* longname);
  private:
  const std::string& _internal_longname() const;
  void _internal_set_longname(const std::string& value);
  std::string* _internal_mutable_longname();
  public:

  // string ContractMonth = 10;
  void clear_contractmonth();
  const std::string& contractmonth() const;
  void set_contractmonth(const std::string& value);
  void set_contractmonth(std::string&& value);
  void set_contractmonth(const char* value);
  void set_contractmonth(const char* value, size_t size);
  std::string* mutable_contractmonth();
  std::string* release_contractmonth();
  void set_allocated_contractmonth(std::string* contractmonth);
  private:
  const std::string& _internal_contractmonth() const;
  void _internal_set_contractmonth(const std::string& value);
  std::string* _internal_mutable_contractmonth();
  public:

  // string Industry = 11;
  void clear_industry();
  const std::string& industry() const;
  void set_industry(const std::string& value);
  void set_industry(std::string&& value);
  void set_industry(const char* value);
  void set_industry(const char* value, size_t size);
  std::string* mutable_industry();
  std::string* release_industry();
  void set_allocated_industry(std::string* industry);
  private:
  const std::string& _internal_industry() const;
  void _internal_set_industry(const std::string& value);
  std::string* _internal_mutable_industry();
  public:

  // string Category = 12;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string Subcategory = 13;
  void clear_subcategory();
  const std::string& subcategory() const;
  void set_subcategory(const std::string& value);
  void set_subcategory(std::string&& value);
  void set_subcategory(const char* value);
  void set_subcategory(const char* value, size_t size);
  std::string* mutable_subcategory();
  std::string* release_subcategory();
  void set_allocated_subcategory(std::string* subcategory);
  private:
  const std::string& _internal_subcategory() const;
  void _internal_set_subcategory(const std::string& value);
  std::string* _internal_mutable_subcategory();
  public:

  // string TimeZoneId = 14;
  void clear_timezoneid();
  const std::string& timezoneid() const;
  void set_timezoneid(const std::string& value);
  void set_timezoneid(std::string&& value);
  void set_timezoneid(const char* value);
  void set_timezoneid(const char* value, size_t size);
  std::string* mutable_timezoneid();
  std::string* release_timezoneid();
  void set_allocated_timezoneid(std::string* timezoneid);
  private:
  const std::string& _internal_timezoneid() const;
  void _internal_set_timezoneid(const std::string& value);
  std::string* _internal_mutable_timezoneid();
  public:

  // string TradingHours = 15;
  void clear_tradinghours();
  const std::string& tradinghours() const;
  void set_tradinghours(const std::string& value);
  void set_tradinghours(std::string&& value);
  void set_tradinghours(const char* value);
  void set_tradinghours(const char* value, size_t size);
  std::string* mutable_tradinghours();
  std::string* release_tradinghours();
  void set_allocated_tradinghours(std::string* tradinghours);
  private:
  const std::string& _internal_tradinghours() const;
  void _internal_set_tradinghours(const std::string& value);
  std::string* _internal_mutable_tradinghours();
  public:

  // string LiquidHours = 16;
  void clear_liquidhours();
  const std::string& liquidhours() const;
  void set_liquidhours(const std::string& value);
  void set_liquidhours(std::string&& value);
  void set_liquidhours(const char* value);
  void set_liquidhours(const char* value, size_t size);
  std::string* mutable_liquidhours();
  std::string* release_liquidhours();
  void set_allocated_liquidhours(std::string* liquidhours);
  private:
  const std::string& _internal_liquidhours() const;
  void _internal_set_liquidhours(const std::string& value);
  std::string* _internal_mutable_liquidhours();
  public:

  // string EvRule = 17;
  void clear_evrule();
  const std::string& evrule() const;
  void set_evrule(const std::string& value);
  void set_evrule(std::string&& value);
  void set_evrule(const char* value);
  void set_evrule(const char* value, size_t size);
  std::string* mutable_evrule();
  std::string* release_evrule();
  void set_allocated_evrule(std::string* evrule);
  private:
  const std::string& _internal_evrule() const;
  void _internal_set_evrule(const std::string& value);
  std::string* _internal_mutable_evrule();
  public:

  // string UnderSymbol = 21;
  void clear_undersymbol();
  const std::string& undersymbol() const;
  void set_undersymbol(const std::string& value);
  void set_undersymbol(std::string&& value);
  void set_undersymbol(const char* value);
  void set_undersymbol(const char* value, size_t size);
  std::string* mutable_undersymbol();
  std::string* release_undersymbol();
  void set_allocated_undersymbol(std::string* undersymbol);
  private:
  const std::string& _internal_undersymbol() const;
  void _internal_set_undersymbol(const std::string& value);
  std::string* _internal_mutable_undersymbol();
  public:

  // string UnderSecType = 22;
  void clear_undersectype();
  const std::string& undersectype() const;
  void set_undersectype(const std::string& value);
  void set_undersectype(std::string&& value);
  void set_undersectype(const char* value);
  void set_undersectype(const char* value, size_t size);
  std::string* mutable_undersectype();
  std::string* release_undersectype();
  void set_allocated_undersectype(std::string* undersectype);
  private:
  const std::string& _internal_undersectype() const;
  void _internal_set_undersectype(const std::string& value);
  std::string* _internal_mutable_undersectype();
  public:

  // string MarketRuleIds = 23;
  void clear_marketruleids();
  const std::string& marketruleids() const;
  void set_marketruleids(const std::string& value);
  void set_marketruleids(std::string&& value);
  void set_marketruleids(const char* value);
  void set_marketruleids(const char* value, size_t size);
  std::string* mutable_marketruleids();
  std::string* release_marketruleids();
  void set_allocated_marketruleids(std::string* marketruleids);
  private:
  const std::string& _internal_marketruleids() const;
  void _internal_set_marketruleids(const std::string& value);
  std::string* _internal_mutable_marketruleids();
  public:

  // string RealExpirationDate = 24;
  void clear_realexpirationdate();
  const std::string& realexpirationdate() const;
  void set_realexpirationdate(const std::string& value);
  void set_realexpirationdate(std::string&& value);
  void set_realexpirationdate(const char* value);
  void set_realexpirationdate(const char* value, size_t size);
  std::string* mutable_realexpirationdate();
  std::string* release_realexpirationdate();
  void set_allocated_realexpirationdate(std::string* realexpirationdate);
  private:
  const std::string& _internal_realexpirationdate() const;
  void _internal_set_realexpirationdate(const std::string& value);
  std::string* _internal_mutable_realexpirationdate();
  public:

  // string LastTradeTime = 25;
  void clear_lasttradetime();
  const std::string& lasttradetime() const;
  void set_lasttradetime(const std::string& value);
  void set_lasttradetime(std::string&& value);
  void set_lasttradetime(const char* value);
  void set_lasttradetime(const char* value, size_t size);
  std::string* mutable_lasttradetime();
  std::string* release_lasttradetime();
  void set_allocated_lasttradetime(std::string* lasttradetime);
  private:
  const std::string& _internal_lasttradetime() const;
  void _internal_set_lasttradetime(const std::string& value);
  std::string* _internal_mutable_lasttradetime();
  public:

  // string Cusip = 27;
  void clear_cusip();
  const std::string& cusip() const;
  void set_cusip(const std::string& value);
  void set_cusip(std::string&& value);
  void set_cusip(const char* value);
  void set_cusip(const char* value, size_t size);
  std::string* mutable_cusip();
  std::string* release_cusip();
  void set_allocated_cusip(std::string* cusip);
  private:
  const std::string& _internal_cusip() const;
  void _internal_set_cusip(const std::string& value);
  std::string* _internal_mutable_cusip();
  public:

  // string Ratings = 28;
  void clear_ratings();
  const std::string& ratings() const;
  void set_ratings(const std::string& value);
  void set_ratings(std::string&& value);
  void set_ratings(const char* value);
  void set_ratings(const char* value, size_t size);
  std::string* mutable_ratings();
  std::string* release_ratings();
  void set_allocated_ratings(std::string* ratings);
  private:
  const std::string& _internal_ratings() const;
  void _internal_set_ratings(const std::string& value);
  std::string* _internal_mutable_ratings();
  public:

  // string DescAppend = 29;
  void clear_descappend();
  const std::string& descappend() const;
  void set_descappend(const std::string& value);
  void set_descappend(std::string&& value);
  void set_descappend(const char* value);
  void set_descappend(const char* value, size_t size);
  std::string* mutable_descappend();
  std::string* release_descappend();
  void set_allocated_descappend(std::string* descappend);
  private:
  const std::string& _internal_descappend() const;
  void _internal_set_descappend(const std::string& value);
  std::string* _internal_mutable_descappend();
  public:

  // string BondType = 30;
  void clear_bondtype();
  const std::string& bondtype() const;
  void set_bondtype(const std::string& value);
  void set_bondtype(std::string&& value);
  void set_bondtype(const char* value);
  void set_bondtype(const char* value, size_t size);
  std::string* mutable_bondtype();
  std::string* release_bondtype();
  void set_allocated_bondtype(std::string* bondtype);
  private:
  const std::string& _internal_bondtype() const;
  void _internal_set_bondtype(const std::string& value);
  std::string* _internal_mutable_bondtype();
  public:

  // string CouponType = 31;
  void clear_coupontype();
  const std::string& coupontype() const;
  void set_coupontype(const std::string& value);
  void set_coupontype(std::string&& value);
  void set_coupontype(const char* value);
  void set_coupontype(const char* value, size_t size);
  std::string* mutable_coupontype();
  std::string* release_coupontype();
  void set_allocated_coupontype(std::string* coupontype);
  private:
  const std::string& _internal_coupontype() const;
  void _internal_set_coupontype(const std::string& value);
  std::string* _internal_mutable_coupontype();
  public:

  // string Maturity = 36;
  void clear_maturity();
  const std::string& maturity() const;
  void set_maturity(const std::string& value);
  void set_maturity(std::string&& value);
  void set_maturity(const char* value);
  void set_maturity(const char* value, size_t size);
  std::string* mutable_maturity();
  std::string* release_maturity();
  void set_allocated_maturity(std::string* maturity);
  private:
  const std::string& _internal_maturity() const;
  void _internal_set_maturity(const std::string& value);
  std::string* _internal_mutable_maturity();
  public:

  // string IssueDate = 37;
  void clear_issuedate();
  const std::string& issuedate() const;
  void set_issuedate(const std::string& value);
  void set_issuedate(std::string&& value);
  void set_issuedate(const char* value);
  void set_issuedate(const char* value, size_t size);
  std::string* mutable_issuedate();
  std::string* release_issuedate();
  void set_allocated_issuedate(std::string* issuedate);
  private:
  const std::string& _internal_issuedate() const;
  void _internal_set_issuedate(const std::string& value);
  std::string* _internal_mutable_issuedate();
  public:

  // string NextOptionDate = 38;
  void clear_nextoptiondate();
  const std::string& nextoptiondate() const;
  void set_nextoptiondate(const std::string& value);
  void set_nextoptiondate(std::string&& value);
  void set_nextoptiondate(const char* value);
  void set_nextoptiondate(const char* value, size_t size);
  std::string* mutable_nextoptiondate();
  std::string* release_nextoptiondate();
  void set_allocated_nextoptiondate(std::string* nextoptiondate);
  private:
  const std::string& _internal_nextoptiondate() const;
  void _internal_set_nextoptiondate(const std::string& value);
  std::string* _internal_mutable_nextoptiondate();
  public:

  // string NextOptionType = 39;
  void clear_nextoptiontype();
  const std::string& nextoptiontype() const;
  void set_nextoptiontype(const std::string& value);
  void set_nextoptiontype(std::string&& value);
  void set_nextoptiontype(const char* value);
  void set_nextoptiontype(const char* value, size_t size);
  std::string* mutable_nextoptiontype();
  std::string* release_nextoptiontype();
  void set_allocated_nextoptiontype(std::string* nextoptiontype);
  private:
  const std::string& _internal_nextoptiontype() const;
  void _internal_set_nextoptiontype(const std::string& value);
  std::string* _internal_mutable_nextoptiontype();
  public:

  // string Notes = 41;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // .Jde.Markets.Proto.Contract Contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:

  // double MinTick = 4;
  void clear_mintick();
  double mintick() const;
  void set_mintick(double value);
  private:
  double _internal_mintick() const;
  void _internal_set_mintick(double value);
  public:

  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 UnderConId = 8;
  void clear_underconid();
  ::PROTOBUF_NAMESPACE_ID::uint32 underconid() const;
  void set_underconid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_underconid() const;
  void _internal_set_underconid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 PriceMagnifier = 7;
  void clear_pricemagnifier();
  ::PROTOBUF_NAMESPACE_ID::int64 pricemagnifier() const;
  void set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pricemagnifier() const;
  void _internal_set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double EvMultiplier = 18;
  void clear_evmultiplier();
  double evmultiplier() const;
  void set_evmultiplier(double value);
  private:
  double _internal_evmultiplier() const;
  void _internal_set_evmultiplier(double value);
  public:

  // int32 MdSizeMultiplier = 19;
  void clear_mdsizemultiplier();
  ::PROTOBUF_NAMESPACE_ID::int32 mdsizemultiplier() const;
  void set_mdsizemultiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mdsizemultiplier() const;
  void _internal_set_mdsizemultiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AggGroup = 20;
  void clear_agggroup();
  ::PROTOBUF_NAMESPACE_ID::int32 agggroup() const;
  void set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agggroup() const;
  void _internal_set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double Coupon = 34;
  void clear_coupon();
  double coupon() const;
  void set_coupon(double value);
  private:
  double _internal_coupon() const;
  void _internal_set_coupon(double value);
  public:

  // bool Callable = 32;
  void clear_callable();
  bool callable() const;
  void set_callable(bool value);
  private:
  bool _internal_callable() const;
  void _internal_set_callable(bool value);
  public:

  // bool Putable = 33;
  void clear_putable();
  bool putable() const;
  void set_putable(bool value);
  private:
  bool _internal_putable() const;
  void _internal_set_putable(bool value);
  public:

  // bool Convertible = 35;
  void clear_convertible();
  bool convertible() const;
  void set_convertible(bool value);
  private:
  bool _internal_convertible() const;
  void _internal_set_convertible(bool value);
  public:

  // bool NextOptionPartial = 40;
  void clear_nextoptionpartial();
  bool nextoptionpartial() const;
  void set_nextoptionpartial(bool value);
  private:
  bool _internal_nextoptionpartial() const;
  void _internal_set_nextoptionpartial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.ContractDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue > secidlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordertypes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validexchanges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractmonth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr industry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subcategory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezoneid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradinghours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liquidhours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evrule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr undersymbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr undersectype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketruleids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr realexpirationdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lasttradetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cusip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ratings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descappend_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bondtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coupontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maturity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nextoptiondate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nextoptiontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::Jde::Markets::Proto::Contract* contract_;
  double mintick_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 underconid_;
  ::PROTOBUF_NAMESPACE_ID::int64 pricemagnifier_;
  double evmultiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdsizemultiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 agggroup_;
  double coupon_;
  bool callable_;
  bool putable_;
  bool convertible_;
  bool nextoptionpartial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNumberFieldNumber = 1,
    kContractFieldNumber = 2,
    kSizeFieldNumber = 3,
    kAvgCostFieldNumber = 4,
  };
  // string AccountNumber = 1;
  void clear_accountnumber();
  const std::string& accountnumber() const;
  void set_accountnumber(const std::string& value);
  void set_accountnumber(std::string&& value);
  void set_accountnumber(const char* value);
  void set_accountnumber(const char* value, size_t size);
  std::string* mutable_accountnumber();
  std::string* release_accountnumber();
  void set_allocated_accountnumber(std::string* accountnumber);
  private:
  const std::string& _internal_accountnumber() const;
  void _internal_set_accountnumber(const std::string& value);
  std::string* _internal_mutable_accountnumber();
  public:

  // .Jde.Markets.Proto.Contract Contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:

  // double Size = 3;
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // double AvgCost = 4;
  void clear_avgcost();
  double avgcost() const;
  void set_avgcost(double value);
  private:
  double _internal_avgcost() const;
  void _internal_set_avgcost(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountnumber_;
  ::Jde::Markets::Proto::Contract* contract_;
  double size_;
  double avgcost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT AccountList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.AccountList) */ {
 public:
  AccountList();
  virtual ~AccountList();

  AccountList(const AccountList& from);
  AccountList(AccountList&& from) noexcept
    : AccountList() {
    *this = ::std::move(from);
  }

  inline AccountList& operator=(const AccountList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountList& operator=(AccountList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountList* internal_default_instance() {
    return reinterpret_cast<const AccountList*>(
               &_AccountList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AccountList& a, AccountList& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountList* New() const final {
    return CreateMaybeMessage<AccountList>(nullptr);
  }

  AccountList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountList& from);
  void MergeFrom(const AccountList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.AccountList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 1,
  };
  // repeated string Numbers = 1;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  const std::string& numbers(int index) const;
  std::string* mutable_numbers(int index);
  void set_numbers(int index, const std::string& value);
  void set_numbers(int index, std::string&& value);
  void set_numbers(int index, const char* value);
  void set_numbers(int index, const char* value, size_t size);
  std::string* add_numbers();
  void add_numbers(const std::string& value);
  void add_numbers(std::string&& value);
  void add_numbers(const char* value);
  void add_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_numbers();
  private:
  const std::string& _internal_numbers(int index) const;
  std::string* _internal_add_numbers();
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.AccountList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> numbers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT AccountUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.AccountUpdate) */ {
 public:
  AccountUpdate();
  virtual ~AccountUpdate();

  AccountUpdate(const AccountUpdate& from);
  AccountUpdate(AccountUpdate&& from) noexcept
    : AccountUpdate() {
    *this = ::std::move(from);
  }

  inline AccountUpdate& operator=(const AccountUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpdate& operator=(AccountUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountUpdate* internal_default_instance() {
    return reinterpret_cast<const AccountUpdate*>(
               &_AccountUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AccountUpdate& a, AccountUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountUpdate* New() const final {
    return CreateMaybeMessage<AccountUpdate>(nullptr);
  }

  AccountUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountUpdate& from);
  void MergeFrom(const AccountUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.AccountUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kKeyFieldNumber = 4,
    kValueFieldNumber = 5,
    kCurrencyFieldNumber = 6,
  };
  // string Account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string Key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string Currency = 6;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.AccountUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT AccountUpdateMulti :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.AccountUpdateMulti) */ {
 public:
  AccountUpdateMulti();
  virtual ~AccountUpdateMulti();

  AccountUpdateMulti(const AccountUpdateMulti& from);
  AccountUpdateMulti(AccountUpdateMulti&& from) noexcept
    : AccountUpdateMulti() {
    *this = ::std::move(from);
  }

  inline AccountUpdateMulti& operator=(const AccountUpdateMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpdateMulti& operator=(AccountUpdateMulti&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountUpdateMulti& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountUpdateMulti* internal_default_instance() {
    return reinterpret_cast<const AccountUpdateMulti*>(
               &_AccountUpdateMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AccountUpdateMulti& a, AccountUpdateMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpdateMulti* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountUpdateMulti* New() const final {
    return CreateMaybeMessage<AccountUpdateMulti>(nullptr);
  }

  AccountUpdateMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountUpdateMulti>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountUpdateMulti& from);
  void MergeFrom(const AccountUpdateMulti& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpdateMulti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.AccountUpdateMulti";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kModelCodeFieldNumber = 3,
    kKeyFieldNumber = 4,
    kValueFieldNumber = 5,
    kCurrencyFieldNumber = 6,
    kRequestIdFieldNumber = 1,
  };
  // string Account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string ModelCode = 3;
  void clear_modelcode();
  const std::string& modelcode() const;
  void set_modelcode(const std::string& value);
  void set_modelcode(std::string&& value);
  void set_modelcode(const char* value);
  void set_modelcode(const char* value, size_t size);
  std::string* mutable_modelcode();
  std::string* release_modelcode();
  void set_allocated_modelcode(std::string* modelcode);
  private:
  const std::string& _internal_modelcode() const;
  void _internal_set_modelcode(const std::string& value);
  std::string* _internal_mutable_modelcode();
  public:

  // string Key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string Currency = 6;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.AccountUpdateMulti)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Bar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Bar) */ {
 public:
  Bar();
  virtual ~Bar();

  Bar(const Bar& from);
  Bar(Bar&& from) noexcept
    : Bar() {
    *this = ::std::move(from);
  }

  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bar& operator=(Bar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bar* internal_default_instance() {
    return reinterpret_cast<const Bar*>(
               &_Bar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Bar& a, Bar& b) {
    a.Swap(&b);
  }
  inline void Swap(Bar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bar* New() const final {
    return CreateMaybeMessage<Bar>(nullptr);
  }

  Bar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bar& from);
  void MergeFrom(const Bar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Bar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kHighFieldNumber = 2,
    kLowFieldNumber = 3,
    kOpenFieldNumber = 4,
    kCloseFieldNumber = 5,
    kWapFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kCountFieldNumber = 8,
  };
  // .google.protobuf.Timestamp Time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:

  // double High = 2;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // double Low = 3;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double Open = 4;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double Close = 5;
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // double Wap = 6;
  void clear_wap();
  double wap() const;
  void set_wap(double value);
  private:
  double _internal_wap() const;
  void _internal_set_wap(double value);
  public:

  // uint64 Volume = 7;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 Count = 8;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Bar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  double high_;
  double low_;
  double open_;
  double close_;
  double wap_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT HistoricalData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.HistoricalData) */ {
 public:
  HistoricalData();
  virtual ~HistoricalData();

  HistoricalData(const HistoricalData& from);
  HistoricalData(HistoricalData&& from) noexcept
    : HistoricalData() {
    *this = ::std::move(from);
  }

  inline HistoricalData& operator=(const HistoricalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalData& operator=(HistoricalData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalData* internal_default_instance() {
    return reinterpret_cast<const HistoricalData*>(
               &_HistoricalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HistoricalData& a, HistoricalData& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalData* New() const final {
    return CreateMaybeMessage<HistoricalData>(nullptr);
  }

  HistoricalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalData& from);
  void MergeFrom(const HistoricalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.HistoricalData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.Bar Bars = 2;
  int bars_size() const;
  private:
  int _internal_bars_size() const;
  public:
  void clear_bars();
  ::Jde::Markets::Proto::Results::Bar* mutable_bars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >*
      mutable_bars();
  private:
  const ::Jde::Markets::Proto::Results::Bar& _internal_bars(int index) const;
  ::Jde::Markets::Proto::Results::Bar* _internal_add_bars();
  public:
  const ::Jde::Markets::Proto::Results::Bar& bars(int index) const;
  ::Jde::Markets::Proto::Results::Bar* add_bars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >&
      bars() const;

  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.HistoricalData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar > bars_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT PortfolioUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.PortfolioUpdate) */ {
 public:
  PortfolioUpdate();
  virtual ~PortfolioUpdate();

  PortfolioUpdate(const PortfolioUpdate& from);
  PortfolioUpdate(PortfolioUpdate&& from) noexcept
    : PortfolioUpdate() {
    *this = ::std::move(from);
  }

  inline PortfolioUpdate& operator=(const PortfolioUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioUpdate& operator=(PortfolioUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortfolioUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortfolioUpdate* internal_default_instance() {
    return reinterpret_cast<const PortfolioUpdate*>(
               &_PortfolioUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PortfolioUpdate& a, PortfolioUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortfolioUpdate* New() const final {
    return CreateMaybeMessage<PortfolioUpdate>(nullptr);
  }

  PortfolioUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortfolioUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortfolioUpdate& from);
  void MergeFrom(const PortfolioUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.PortfolioUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNumberFieldNumber = 8,
    kContractFieldNumber = 1,
    kPositionFieldNumber = 2,
    kMarketPriceFieldNumber = 3,
    kMarketValueFieldNumber = 4,
    kAverageCostFieldNumber = 5,
    kUnrealizedPnlFieldNumber = 6,
    kRealizedPnlFieldNumber = 7,
  };
  // string AccountNumber = 8;
  void clear_accountnumber();
  const std::string& accountnumber() const;
  void set_accountnumber(const std::string& value);
  void set_accountnumber(std::string&& value);
  void set_accountnumber(const char* value);
  void set_accountnumber(const char* value, size_t size);
  std::string* mutable_accountnumber();
  std::string* release_accountnumber();
  void set_allocated_accountnumber(std::string* accountnumber);
  private:
  const std::string& _internal_accountnumber() const;
  void _internal_set_accountnumber(const std::string& value);
  std::string* _internal_mutable_accountnumber();
  public:

  // .Jde.Markets.Proto.Contract Contract = 1;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:

  // double Position = 2;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // double MarketPrice = 3;
  void clear_marketprice();
  double marketprice() const;
  void set_marketprice(double value);
  private:
  double _internal_marketprice() const;
  void _internal_set_marketprice(double value);
  public:

  // double MarketValue = 4;
  void clear_marketvalue();
  double marketvalue() const;
  void set_marketvalue(double value);
  private:
  double _internal_marketvalue() const;
  void _internal_set_marketvalue(double value);
  public:

  // double AverageCost = 5;
  void clear_averagecost();
  double averagecost() const;
  void set_averagecost(double value);
  private:
  double _internal_averagecost() const;
  void _internal_set_averagecost(double value);
  public:

  // double UnrealizedPnl = 6;
  void clear_unrealizedpnl();
  double unrealizedpnl() const;
  void set_unrealizedpnl(double value);
  private:
  double _internal_unrealizedpnl() const;
  void _internal_set_unrealizedpnl(double value);
  public:

  // double RealizedPnl = 7;
  void clear_realizedpnl();
  double realizedpnl() const;
  void set_realizedpnl(double value);
  private:
  double _internal_realizedpnl() const;
  void _internal_set_realizedpnl(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.PortfolioUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountnumber_;
  ::Jde::Markets::Proto::Contract* contract_;
  double position_;
  double marketprice_;
  double marketvalue_;
  double averagecost_;
  double unrealizedpnl_;
  double realizedpnl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Order :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Order";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kBuySellFieldNumber = 6,
    kOrderTypeFieldNumber = 10,
    kIdFieldNumber = 1,
    kConidFieldNumber = 4,
    kQuantityFieldNumber = 7,
    kPriceFieldNumber = 8,
    kDateFieldNumber = 5,
    kOrderTimeFieldNumber = 11,
    kCommissionFieldNumber = 9,
  };
  // string AccountId = 2;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // string Symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string BuySell = 6;
  void clear_buysell();
  const std::string& buysell() const;
  void set_buysell(const std::string& value);
  void set_buysell(std::string&& value);
  void set_buysell(const char* value);
  void set_buysell(const char* value, size_t size);
  std::string* mutable_buysell();
  std::string* release_buysell();
  void set_allocated_buysell(std::string* buysell);
  private:
  const std::string& _internal_buysell() const;
  void _internal_set_buysell(const std::string& value);
  std::string* _internal_mutable_buysell();
  public:

  // string OrderType = 10;
  void clear_ordertype();
  const std::string& ordertype() const;
  void set_ordertype(const std::string& value);
  void set_ordertype(std::string&& value);
  void set_ordertype(const char* value);
  void set_ordertype(const char* value, size_t size);
  std::string* mutable_ordertype();
  std::string* release_ordertype();
  void set_allocated_ordertype(std::string* ordertype);
  private:
  const std::string& _internal_ordertype() const;
  void _internal_set_ordertype(const std::string& value);
  std::string* _internal_mutable_ordertype();
  public:

  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Conid = 4;
  void clear_conid();
  ::PROTOBUF_NAMESPACE_ID::uint32 conid() const;
  void set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conid() const;
  void _internal_set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double Quantity = 7;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // double Price = 8;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // uint32 Date = 5;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 OrderTime = 11;
  void clear_ordertime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ordertime() const;
  void set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ordertime() const;
  void _internal_set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double Commission = 9;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Order)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buysell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conid_;
  double quantity_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ordertime_;
  double commission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Trade :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Trade) */ {
 public:
  Trade();
  virtual ~Trade();

  Trade(const Trade& from);
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(nullptr);
  }

  Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Trade";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kBuySellFieldNumber = 6,
    kOrderTypeFieldNumber = 10,
    kExecIdFieldNumber = 13,
    kOrderIdFieldNumber = 1,
    kConidFieldNumber = 4,
    kQuantityFieldNumber = 7,
    kPriceFieldNumber = 8,
    kDateFieldNumber = 5,
    kOrderTimeFieldNumber = 11,
    kCommissionFieldNumber = 9,
    kIdFieldNumber = 12,
    kIsApiFieldNumber = 14,
  };
  // string AccountId = 2;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // string Symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string BuySell = 6;
  void clear_buysell();
  const std::string& buysell() const;
  void set_buysell(const std::string& value);
  void set_buysell(std::string&& value);
  void set_buysell(const char* value);
  void set_buysell(const char* value, size_t size);
  std::string* mutable_buysell();
  std::string* release_buysell();
  void set_allocated_buysell(std::string* buysell);
  private:
  const std::string& _internal_buysell() const;
  void _internal_set_buysell(const std::string& value);
  std::string* _internal_mutable_buysell();
  public:

  // string OrderType = 10;
  void clear_ordertype();
  const std::string& ordertype() const;
  void set_ordertype(const std::string& value);
  void set_ordertype(std::string&& value);
  void set_ordertype(const char* value);
  void set_ordertype(const char* value, size_t size);
  std::string* mutable_ordertype();
  std::string* release_ordertype();
  void set_allocated_ordertype(std::string* ordertype);
  private:
  const std::string& _internal_ordertype() const;
  void _internal_set_ordertype(const std::string& value);
  std::string* _internal_mutable_ordertype();
  public:

  // string ExecId = 13;
  void clear_execid();
  const std::string& execid() const;
  void set_execid(const std::string& value);
  void set_execid(std::string&& value);
  void set_execid(const char* value);
  void set_execid(const char* value, size_t size);
  std::string* mutable_execid();
  std::string* release_execid();
  void set_allocated_execid(std::string* execid);
  private:
  const std::string& _internal_execid() const;
  void _internal_set_execid(const std::string& value);
  std::string* _internal_mutable_execid();
  public:

  // uint32 OrderId = 1;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::uint32 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Conid = 4;
  void clear_conid();
  ::PROTOBUF_NAMESPACE_ID::uint32 conid() const;
  void set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conid() const;
  void _internal_set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double Quantity = 7;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // double Price = 8;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // uint32 Date = 5;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 OrderTime = 11;
  void clear_ordertime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ordertime() const;
  void set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ordertime() const;
  void _internal_set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double Commission = 9;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // uint32 Id = 12;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool IsApi = 14;
  void clear_isapi();
  bool isapi() const;
  void set_isapi(bool value);
  private:
  bool _internal_isapi() const;
  void _internal_set_isapi(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Trade)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buysell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordertype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orderid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conid_;
  double quantity_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ordertime_;
  double commission_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool isapi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Flex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Flex) */ {
 public:
  Flex();
  virtual ~Flex();

  Flex(const Flex& from);
  Flex(Flex&& from) noexcept
    : Flex() {
    *this = ::std::move(from);
  }

  inline Flex& operator=(const Flex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flex& operator=(Flex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Flex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Flex* internal_default_instance() {
    return reinterpret_cast<const Flex*>(
               &_Flex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Flex& a, Flex& b) {
    a.Swap(&b);
  }
  inline void Swap(Flex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Flex* New() const final {
    return CreateMaybeMessage<Flex>(nullptr);
  }

  Flex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Flex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Flex& from);
  void MergeFrom(const Flex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Flex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 2,
    kTradesFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.Order Orders = 2;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::Jde::Markets::Proto::Results::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Order >*
      mutable_orders();
  private:
  const ::Jde::Markets::Proto::Results::Order& _internal_orders(int index) const;
  ::Jde::Markets::Proto::Results::Order* _internal_add_orders();
  public:
  const ::Jde::Markets::Proto::Results::Order& orders(int index) const;
  ::Jde::Markets::Proto::Results::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Order >&
      orders() const;

  // repeated .Jde.Markets.Proto.Results.Trade Trades = 3;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::Jde::Markets::Proto::Results::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >*
      mutable_trades();
  private:
  const ::Jde::Markets::Proto::Results::Trade& _internal_trades(int index) const;
  ::Jde::Markets::Proto::Results::Trade* _internal_add_trades();
  public:
  const ::Jde::Markets::Proto::Results::Trade& trades(int index) const;
  ::Jde::Markets::Proto::Results::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >&
      trades() const;

  // uint32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Flex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Order > orders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade > trades_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Error :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Error";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string Message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Error)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Option :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Option) */ {
 public:
  Option();
  virtual ~Option();

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Option& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Option* New() const final {
    return CreateMaybeMessage<Option>(nullptr);
  }

  Option* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Option& from);
  void MergeFrom(const Option& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Option";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kBidFieldNumber = 3,
    kAskFieldNumber = 4,
    kLastFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kOpenInterestFieldNumber = 7,
    kOIChangeFieldNumber = 8,
    kPreviousPriceFieldNumber = 9,
  };
  // uint32 ContractId = 1;
  void clear_contractid();
  ::PROTOBUF_NAMESPACE_ID::uint32 contractid() const;
  void set_contractid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contractid() const;
  void _internal_set_contractid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Strike = 2;
  void clear_strike();
  float strike() const;
  void set_strike(float value);
  private:
  float _internal_strike() const;
  void _internal_set_strike(float value);
  public:

  // float Bid = 3;
  void clear_bid();
  float bid() const;
  void set_bid(float value);
  private:
  float _internal_bid() const;
  void _internal_set_bid(float value);
  public:

  // float Ask = 4;
  void clear_ask();
  float ask() const;
  void set_ask(float value);
  private:
  float _internal_ask() const;
  void _internal_set_ask(float value);
  public:

  // float Last = 5;
  void clear_last();
  float last() const;
  void set_last(float value);
  private:
  float _internal_last() const;
  void _internal_set_last(float value);
  public:

  // float Volume = 6;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // uint32 OpenInterest = 7;
  void clear_openinterest();
  ::PROTOBUF_NAMESPACE_ID::uint32 openinterest() const;
  void set_openinterest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_openinterest() const;
  void _internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 OIChange = 8;
  void clear_oichange();
  ::PROTOBUF_NAMESPACE_ID::int32 oichange() const;
  void set_oichange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oichange() const;
  void _internal_set_oichange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float PreviousPrice = 9;
  void clear_previousprice();
  float previousprice() const;
  void set_previousprice(float value);
  private:
  float _internal_previousprice() const;
  void _internal_set_previousprice(float value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Option)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contractid_;
  float strike_;
  float bid_;
  float ask_;
  float last_;
  float volume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 openinterest_;
  ::PROTOBUF_NAMESPACE_ID::int32 oichange_;
  float previousprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OptionDay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OptionDay) */ {
 public:
  OptionDay();
  virtual ~OptionDay();

  OptionDay(const OptionDay& from);
  OptionDay(OptionDay&& from) noexcept
    : OptionDay() {
    *this = ::std::move(from);
  }

  inline OptionDay& operator=(const OptionDay& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionDay& operator=(OptionDay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionDay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionDay* internal_default_instance() {
    return reinterpret_cast<const OptionDay*>(
               &_OptionDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OptionDay& a, OptionDay& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionDay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionDay* New() const final {
    return CreateMaybeMessage<OptionDay>(nullptr);
  }

  OptionDay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionDay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionDay& from);
  void MergeFrom(const OptionDay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OptionDay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kIsCallFieldNumber = 1,
    kExpirationDaysFieldNumber = 2,
  };
  // repeated .Jde.Markets.Proto.Results.Option Values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Jde::Markets::Proto::Results::Option* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >*
      mutable_values();
  private:
  const ::Jde::Markets::Proto::Results::Option& _internal_values(int index) const;
  ::Jde::Markets::Proto::Results::Option* _internal_add_values();
  public:
  const ::Jde::Markets::Proto::Results::Option& values(int index) const;
  ::Jde::Markets::Proto::Results::Option* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >&
      values() const;

  // bool IsCall = 1;
  void clear_iscall();
  bool iscall() const;
  void set_iscall(bool value);
  private:
  bool _internal_iscall() const;
  void _internal_set_iscall(bool value);
  public:

  // uint32 ExpirationDays = 2;
  void clear_expirationdays();
  ::PROTOBUF_NAMESPACE_ID::uint32 expirationdays() const;
  void set_expirationdays(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expirationdays() const;
  void _internal_set_expirationdays(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OptionDay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option > values_;
  bool iscall_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expirationdays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OptionValues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OptionValues) */ {
 public:
  OptionValues();
  virtual ~OptionValues();

  OptionValues(const OptionValues& from);
  OptionValues(OptionValues&& from) noexcept
    : OptionValues() {
    *this = ::std::move(from);
  }

  inline OptionValues& operator=(const OptionValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionValues& operator=(OptionValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionValues* internal_default_instance() {
    return reinterpret_cast<const OptionValues*>(
               &_OptionValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OptionValues& a, OptionValues& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionValues* New() const final {
    return CreateMaybeMessage<OptionValues>(nullptr);
  }

  OptionValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionValues& from);
  void MergeFrom(const OptionValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OptionValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionDaysFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.OptionDay OptionDays = 2;
  int optiondays_size() const;
  private:
  int _internal_optiondays_size() const;
  public:
  void clear_optiondays();
  ::Jde::Markets::Proto::Results::OptionDay* mutable_optiondays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >*
      mutable_optiondays();
  private:
  const ::Jde::Markets::Proto::Results::OptionDay& _internal_optiondays(int index) const;
  ::Jde::Markets::Proto::Results::OptionDay* _internal_add_optiondays();
  public:
  const ::Jde::Markets::Proto::Results::OptionDay& optiondays(int index) const;
  ::Jde::Markets::Proto::Results::OptionDay* add_optiondays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >&
      optiondays() const;

  // uint32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OptionValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay > optiondays_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT MessageUnion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.MessageUnion) */ {
 public:
  MessageUnion();
  virtual ~MessageUnion();

  MessageUnion(const MessageUnion& from);
  MessageUnion(MessageUnion&& from) noexcept
    : MessageUnion() {
    *this = ::std::move(from);
  }

  inline MessageUnion& operator=(const MessageUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageUnion& operator=(MessageUnion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageUnion& default_instance();

  enum ValueCase {
    kPosition = 1,
    kContract = 2,
    kMessage = 3,
    kAccountList = 4,
    kAccountUpdate = 5,
    kAccountUpdateMulti = 6,
    kPortfolioUpdate = 7,
    kTickGeneric = 8,
    kTickPrice = 9,
    kTickSize = 10,
    kTickString = 11,
    kContractDetails = 12,
    kError = 13,
    kOptions = 14,
    kHistoricalData = 15,
    kStringResult = 16,
    kFlex = 17,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageUnion* internal_default_instance() {
    return reinterpret_cast<const MessageUnion*>(
               &_MessageUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MessageUnion& a, MessageUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageUnion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageUnion* New() const final {
    return CreateMaybeMessage<MessageUnion>(nullptr);
  }

  MessageUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageUnion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageUnion& from);
  void MergeFrom(const MessageUnion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageUnion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.MessageUnion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kContractFieldNumber = 2,
    kMessageFieldNumber = 3,
    kAccountListFieldNumber = 4,
    kAccountUpdateFieldNumber = 5,
    kAccountUpdateMultiFieldNumber = 6,
    kPortfolioUpdateFieldNumber = 7,
    kTickGenericFieldNumber = 8,
    kTickPriceFieldNumber = 9,
    kTickSizeFieldNumber = 10,
    kTickStringFieldNumber = 11,
    kContractDetailsFieldNumber = 12,
    kErrorFieldNumber = 13,
    kOptionsFieldNumber = 14,
    kHistoricalDataFieldNumber = 15,
    kStringResultFieldNumber = 16,
    kFlexFieldNumber = 17,
  };
  // .Jde.Markets.Proto.Results.Position Position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Jde::Markets::Proto::Results::Position& position() const;
  ::Jde::Markets::Proto::Results::Position* release_position();
  ::Jde::Markets::Proto::Results::Position* mutable_position();
  void set_allocated_position(::Jde::Markets::Proto::Results::Position* position);
  private:
  const ::Jde::Markets::Proto::Results::Position& _internal_position() const;
  ::Jde::Markets::Proto::Results::Position* _internal_mutable_position();
  public:

  // .Jde.Markets.Proto.Contract Contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:

  // .Jde.Markets.Proto.Results.MessageValue Message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::Jde::Markets::Proto::Results::MessageValue& message() const;
  ::Jde::Markets::Proto::Results::MessageValue* release_message();
  ::Jde::Markets::Proto::Results::MessageValue* mutable_message();
  void set_allocated_message(::Jde::Markets::Proto::Results::MessageValue* message);
  private:
  const ::Jde::Markets::Proto::Results::MessageValue& _internal_message() const;
  ::Jde::Markets::Proto::Results::MessageValue* _internal_mutable_message();
  public:

  // .Jde.Markets.Proto.Results.AccountList AccountList = 4;
  bool has_accountlist() const;
  private:
  bool _internal_has_accountlist() const;
  public:
  void clear_accountlist();
  const ::Jde::Markets::Proto::Results::AccountList& accountlist() const;
  ::Jde::Markets::Proto::Results::AccountList* release_accountlist();
  ::Jde::Markets::Proto::Results::AccountList* mutable_accountlist();
  void set_allocated_accountlist(::Jde::Markets::Proto::Results::AccountList* accountlist);
  private:
  const ::Jde::Markets::Proto::Results::AccountList& _internal_accountlist() const;
  ::Jde::Markets::Proto::Results::AccountList* _internal_mutable_accountlist();
  public:

  // .Jde.Markets.Proto.Results.AccountUpdate AccountUpdate = 5;
  bool has_accountupdate() const;
  private:
  bool _internal_has_accountupdate() const;
  public:
  void clear_accountupdate();
  const ::Jde::Markets::Proto::Results::AccountUpdate& accountupdate() const;
  ::Jde::Markets::Proto::Results::AccountUpdate* release_accountupdate();
  ::Jde::Markets::Proto::Results::AccountUpdate* mutable_accountupdate();
  void set_allocated_accountupdate(::Jde::Markets::Proto::Results::AccountUpdate* accountupdate);
  private:
  const ::Jde::Markets::Proto::Results::AccountUpdate& _internal_accountupdate() const;
  ::Jde::Markets::Proto::Results::AccountUpdate* _internal_mutable_accountupdate();
  public:

  // .Jde.Markets.Proto.Results.AccountUpdateMulti AccountUpdateMulti = 6;
  bool has_accountupdatemulti() const;
  private:
  bool _internal_has_accountupdatemulti() const;
  public:
  void clear_accountupdatemulti();
  const ::Jde::Markets::Proto::Results::AccountUpdateMulti& accountupdatemulti() const;
  ::Jde::Markets::Proto::Results::AccountUpdateMulti* release_accountupdatemulti();
  ::Jde::Markets::Proto::Results::AccountUpdateMulti* mutable_accountupdatemulti();
  void set_allocated_accountupdatemulti(::Jde::Markets::Proto::Results::AccountUpdateMulti* accountupdatemulti);
  private:
  const ::Jde::Markets::Proto::Results::AccountUpdateMulti& _internal_accountupdatemulti() const;
  ::Jde::Markets::Proto::Results::AccountUpdateMulti* _internal_mutable_accountupdatemulti();
  public:

  // .Jde.Markets.Proto.Results.PortfolioUpdate PortfolioUpdate = 7;
  bool has_portfolioupdate() const;
  private:
  bool _internal_has_portfolioupdate() const;
  public:
  void clear_portfolioupdate();
  const ::Jde::Markets::Proto::Results::PortfolioUpdate& portfolioupdate() const;
  ::Jde::Markets::Proto::Results::PortfolioUpdate* release_portfolioupdate();
  ::Jde::Markets::Proto::Results::PortfolioUpdate* mutable_portfolioupdate();
  void set_allocated_portfolioupdate(::Jde::Markets::Proto::Results::PortfolioUpdate* portfolioupdate);
  private:
  const ::Jde::Markets::Proto::Results::PortfolioUpdate& _internal_portfolioupdate() const;
  ::Jde::Markets::Proto::Results::PortfolioUpdate* _internal_mutable_portfolioupdate();
  public:

  // .Jde.Markets.Proto.Results.TickGeneric TickGeneric = 8;
  bool has_tickgeneric() const;
  private:
  bool _internal_has_tickgeneric() const;
  public:
  void clear_tickgeneric();
  const ::Jde::Markets::Proto::Results::TickGeneric& tickgeneric() const;
  ::Jde::Markets::Proto::Results::TickGeneric* release_tickgeneric();
  ::Jde::Markets::Proto::Results::TickGeneric* mutable_tickgeneric();
  void set_allocated_tickgeneric(::Jde::Markets::Proto::Results::TickGeneric* tickgeneric);
  private:
  const ::Jde::Markets::Proto::Results::TickGeneric& _internal_tickgeneric() const;
  ::Jde::Markets::Proto::Results::TickGeneric* _internal_mutable_tickgeneric();
  public:

  // .Jde.Markets.Proto.Results.TickPrice TickPrice = 9;
  bool has_tickprice() const;
  private:
  bool _internal_has_tickprice() const;
  public:
  void clear_tickprice();
  const ::Jde::Markets::Proto::Results::TickPrice& tickprice() const;
  ::Jde::Markets::Proto::Results::TickPrice* release_tickprice();
  ::Jde::Markets::Proto::Results::TickPrice* mutable_tickprice();
  void set_allocated_tickprice(::Jde::Markets::Proto::Results::TickPrice* tickprice);
  private:
  const ::Jde::Markets::Proto::Results::TickPrice& _internal_tickprice() const;
  ::Jde::Markets::Proto::Results::TickPrice* _internal_mutable_tickprice();
  public:

  // .Jde.Markets.Proto.Results.TickSize TickSize = 10;
  bool has_ticksize() const;
  private:
  bool _internal_has_ticksize() const;
  public:
  void clear_ticksize();
  const ::Jde::Markets::Proto::Results::TickSize& ticksize() const;
  ::Jde::Markets::Proto::Results::TickSize* release_ticksize();
  ::Jde::Markets::Proto::Results::TickSize* mutable_ticksize();
  void set_allocated_ticksize(::Jde::Markets::Proto::Results::TickSize* ticksize);
  private:
  const ::Jde::Markets::Proto::Results::TickSize& _internal_ticksize() const;
  ::Jde::Markets::Proto::Results::TickSize* _internal_mutable_ticksize();
  public:

  // .Jde.Markets.Proto.Results.TickString TickString = 11;
  bool has_tickstring() const;
  private:
  bool _internal_has_tickstring() const;
  public:
  void clear_tickstring();
  const ::Jde::Markets::Proto::Results::TickString& tickstring() const;
  ::Jde::Markets::Proto::Results::TickString* release_tickstring();
  ::Jde::Markets::Proto::Results::TickString* mutable_tickstring();
  void set_allocated_tickstring(::Jde::Markets::Proto::Results::TickString* tickstring);
  private:
  const ::Jde::Markets::Proto::Results::TickString& _internal_tickstring() const;
  ::Jde::Markets::Proto::Results::TickString* _internal_mutable_tickstring();
  public:

  // .Jde.Markets.Proto.Results.ContractDetails ContractDetails = 12;
  bool has_contractdetails() const;
  private:
  bool _internal_has_contractdetails() const;
  public:
  void clear_contractdetails();
  const ::Jde::Markets::Proto::Results::ContractDetails& contractdetails() const;
  ::Jde::Markets::Proto::Results::ContractDetails* release_contractdetails();
  ::Jde::Markets::Proto::Results::ContractDetails* mutable_contractdetails();
  void set_allocated_contractdetails(::Jde::Markets::Proto::Results::ContractDetails* contractdetails);
  private:
  const ::Jde::Markets::Proto::Results::ContractDetails& _internal_contractdetails() const;
  ::Jde::Markets::Proto::Results::ContractDetails* _internal_mutable_contractdetails();
  public:

  // .Jde.Markets.Proto.Results.Error Error = 13;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Jde::Markets::Proto::Results::Error& error() const;
  ::Jde::Markets::Proto::Results::Error* release_error();
  ::Jde::Markets::Proto::Results::Error* mutable_error();
  void set_allocated_error(::Jde::Markets::Proto::Results::Error* error);
  private:
  const ::Jde::Markets::Proto::Results::Error& _internal_error() const;
  ::Jde::Markets::Proto::Results::Error* _internal_mutable_error();
  public:

  // .Jde.Markets.Proto.Results.OptionValues Options = 14;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::Jde::Markets::Proto::Results::OptionValues& options() const;
  ::Jde::Markets::Proto::Results::OptionValues* release_options();
  ::Jde::Markets::Proto::Results::OptionValues* mutable_options();
  void set_allocated_options(::Jde::Markets::Proto::Results::OptionValues* options);
  private:
  const ::Jde::Markets::Proto::Results::OptionValues& _internal_options() const;
  ::Jde::Markets::Proto::Results::OptionValues* _internal_mutable_options();
  public:

  // .Jde.Markets.Proto.Results.HistoricalData HistoricalData = 15;
  bool has_historicaldata() const;
  private:
  bool _internal_has_historicaldata() const;
  public:
  void clear_historicaldata();
  const ::Jde::Markets::Proto::Results::HistoricalData& historicaldata() const;
  ::Jde::Markets::Proto::Results::HistoricalData* release_historicaldata();
  ::Jde::Markets::Proto::Results::HistoricalData* mutable_historicaldata();
  void set_allocated_historicaldata(::Jde::Markets::Proto::Results::HistoricalData* historicaldata);
  private:
  const ::Jde::Markets::Proto::Results::HistoricalData& _internal_historicaldata() const;
  ::Jde::Markets::Proto::Results::HistoricalData* _internal_mutable_historicaldata();
  public:

  // .Jde.Markets.Proto.Results.StringResult StringResult = 16;
  bool has_stringresult() const;
  private:
  bool _internal_has_stringresult() const;
  public:
  void clear_stringresult();
  const ::Jde::Markets::Proto::Results::StringResult& stringresult() const;
  ::Jde::Markets::Proto::Results::StringResult* release_stringresult();
  ::Jde::Markets::Proto::Results::StringResult* mutable_stringresult();
  void set_allocated_stringresult(::Jde::Markets::Proto::Results::StringResult* stringresult);
  private:
  const ::Jde::Markets::Proto::Results::StringResult& _internal_stringresult() const;
  ::Jde::Markets::Proto::Results::StringResult* _internal_mutable_stringresult();
  public:

  // .Jde.Markets.Proto.Results.Flex Flex = 17;
  bool has_flex() const;
  private:
  bool _internal_has_flex() const;
  public:
  void clear_flex();
  const ::Jde::Markets::Proto::Results::Flex& flex() const;
  ::Jde::Markets::Proto::Results::Flex* release_flex();
  ::Jde::Markets::Proto::Results::Flex* mutable_flex();
  void set_allocated_flex(::Jde::Markets::Proto::Results::Flex* flex);
  private:
  const ::Jde::Markets::Proto::Results::Flex& _internal_flex() const;
  ::Jde::Markets::Proto::Results::Flex* _internal_mutable_flex();
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.MessageUnion)
 private:
  class _Internal;
  void set_has_position();
  void set_has_contract();
  void set_has_message();
  void set_has_accountlist();
  void set_has_accountupdate();
  void set_has_accountupdatemulti();
  void set_has_portfolioupdate();
  void set_has_tickgeneric();
  void set_has_tickprice();
  void set_has_ticksize();
  void set_has_tickstring();
  void set_has_contractdetails();
  void set_has_error();
  void set_has_options();
  void set_has_historicaldata();
  void set_has_stringresult();
  void set_has_flex();

  inline bool has_Value() const;
  inline void clear_has_Value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::Jde::Markets::Proto::Results::Position* position_;
    ::Jde::Markets::Proto::Contract* contract_;
    ::Jde::Markets::Proto::Results::MessageValue* message_;
    ::Jde::Markets::Proto::Results::AccountList* accountlist_;
    ::Jde::Markets::Proto::Results::AccountUpdate* accountupdate_;
    ::Jde::Markets::Proto::Results::AccountUpdateMulti* accountupdatemulti_;
    ::Jde::Markets::Proto::Results::PortfolioUpdate* portfolioupdate_;
    ::Jde::Markets::Proto::Results::TickGeneric* tickgeneric_;
    ::Jde::Markets::Proto::Results::TickPrice* tickprice_;
    ::Jde::Markets::Proto::Results::TickSize* ticksize_;
    ::Jde::Markets::Proto::Results::TickString* tickstring_;
    ::Jde::Markets::Proto::Results::ContractDetails* contractdetails_;
    ::Jde::Markets::Proto::Results::Error* error_;
    ::Jde::Markets::Proto::Results::OptionValues* options_;
    ::Jde::Markets::Proto::Results::HistoricalData* historicaldata_;
    ::Jde::Markets::Proto::Results::StringResult* stringresult_;
    ::Jde::Markets::Proto::Results::Flex* flex_;
  } Value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Transmission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Transmission) */ {
 public:
  Transmission();
  virtual ~Transmission();

  Transmission(const Transmission& from);
  Transmission(Transmission&& from) noexcept
    : Transmission() {
    *this = ::std::move(from);
  }

  inline Transmission& operator=(const Transmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transmission& operator=(Transmission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transmission* internal_default_instance() {
    return reinterpret_cast<const Transmission*>(
               &_Transmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Transmission& a, Transmission& b) {
    a.Swap(&b);
  }
  inline void Swap(Transmission* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transmission* New() const final {
    return CreateMaybeMessage<Transmission>(nullptr);
  }

  Transmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transmission& from);
  void MergeFrom(const Transmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Transmission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 10,
  };
  // repeated .Jde.Markets.Proto.Results.MessageUnion Messages = 10;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::Jde::Markets::Proto::Results::MessageUnion* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >*
      mutable_messages();
  private:
  const ::Jde::Markets::Proto::Results::MessageUnion& _internal_messages(int index) const;
  ::Jde::Markets::Proto::Results::MessageUnion* _internal_add_messages();
  public:
  const ::Jde::Markets::Proto::Results::MessageUnion& messages(int index) const;
  ::Jde::Markets::Proto::Results::MessageUnion* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >&
      messages() const;

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Transmission)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickGeneric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickGeneric) */ {
 public:
  TickGeneric();
  virtual ~TickGeneric();

  TickGeneric(const TickGeneric& from);
  TickGeneric(TickGeneric&& from) noexcept
    : TickGeneric() {
    *this = ::std::move(from);
  }

  inline TickGeneric& operator=(const TickGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickGeneric& operator=(TickGeneric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickGeneric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickGeneric* internal_default_instance() {
    return reinterpret_cast<const TickGeneric*>(
               &_TickGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TickGeneric& a, TickGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(TickGeneric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickGeneric* New() const final {
    return CreateMaybeMessage<TickGeneric>(nullptr);
  }

  TickGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickGeneric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickGeneric& from);
  void MergeFrom(const TickGeneric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickGeneric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickGeneric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType TickType = 2;
  void clear_ticktype();
  ::Jde::Markets::Proto::Results::ETickType ticktype() const;
  void set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_ticktype() const;
  void _internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // double Value = 3;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickGeneric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  int ticktype_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickAttrib :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickAttrib) */ {
 public:
  TickAttrib();
  virtual ~TickAttrib();

  TickAttrib(const TickAttrib& from);
  TickAttrib(TickAttrib&& from) noexcept
    : TickAttrib() {
    *this = ::std::move(from);
  }

  inline TickAttrib& operator=(const TickAttrib& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickAttrib& operator=(TickAttrib&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickAttrib& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickAttrib* internal_default_instance() {
    return reinterpret_cast<const TickAttrib*>(
               &_TickAttrib_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TickAttrib& a, TickAttrib& b) {
    a.Swap(&b);
  }
  inline void Swap(TickAttrib* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickAttrib* New() const final {
    return CreateMaybeMessage<TickAttrib>(nullptr);
  }

  TickAttrib* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickAttrib>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickAttrib& from);
  void MergeFrom(const TickAttrib& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickAttrib* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickAttrib";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanAutoExecuteFieldNumber = 1,
    kPastLimitFieldNumber = 2,
    kPreOpenFieldNumber = 3,
  };
  // bool CanAutoExecute = 1;
  void clear_canautoexecute();
  bool canautoexecute() const;
  void set_canautoexecute(bool value);
  private:
  bool _internal_canautoexecute() const;
  void _internal_set_canautoexecute(bool value);
  public:

  // bool PastLimit = 2;
  void clear_pastlimit();
  bool pastlimit() const;
  void set_pastlimit(bool value);
  private:
  bool _internal_pastlimit() const;
  void _internal_set_pastlimit(bool value);
  public:

  // bool PreOpen = 3;
  void clear_preopen();
  bool preopen() const;
  void set_preopen(bool value);
  private:
  bool _internal_preopen() const;
  void _internal_set_preopen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickAttrib)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool canautoexecute_;
  bool pastlimit_;
  bool preopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickPrice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickPrice) */ {
 public:
  TickPrice();
  virtual ~TickPrice();

  TickPrice(const TickPrice& from);
  TickPrice(TickPrice&& from) noexcept
    : TickPrice() {
    *this = ::std::move(from);
  }

  inline TickPrice& operator=(const TickPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickPrice& operator=(TickPrice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickPrice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickPrice* internal_default_instance() {
    return reinterpret_cast<const TickPrice*>(
               &_TickPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TickPrice& a, TickPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(TickPrice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickPrice* New() const final {
    return CreateMaybeMessage<TickPrice>(nullptr);
  }

  TickPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickPrice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickPrice& from);
  void MergeFrom(const TickPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickPrice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickPrice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kPriceFieldNumber = 3,
  };
  // .Jde.Markets.Proto.Results.TickAttrib Attributes = 4;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::Jde::Markets::Proto::Results::TickAttrib& attributes() const;
  ::Jde::Markets::Proto::Results::TickAttrib* release_attributes();
  ::Jde::Markets::Proto::Results::TickAttrib* mutable_attributes();
  void set_allocated_attributes(::Jde::Markets::Proto::Results::TickAttrib* attributes);
  private:
  const ::Jde::Markets::Proto::Results::TickAttrib& _internal_attributes() const;
  ::Jde::Markets::Proto::Results::TickAttrib* _internal_mutable_attributes();
  public:

  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType TickType = 2;
  void clear_ticktype();
  ::Jde::Markets::Proto::Results::ETickType ticktype() const;
  void set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_ticktype() const;
  void _internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // double Price = 3;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickPrice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Jde::Markets::Proto::Results::TickAttrib* attributes_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  int ticktype_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickSize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickSize) */ {
 public:
  TickSize();
  virtual ~TickSize();

  TickSize(const TickSize& from);
  TickSize(TickSize&& from) noexcept
    : TickSize() {
    *this = ::std::move(from);
  }

  inline TickSize& operator=(const TickSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickSize& operator=(TickSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickSize* internal_default_instance() {
    return reinterpret_cast<const TickSize*>(
               &_TickSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TickSize& a, TickSize& b) {
    a.Swap(&b);
  }
  inline void Swap(TickSize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickSize* New() const final {
    return CreateMaybeMessage<TickSize>(nullptr);
  }

  TickSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickSize& from);
  void MergeFrom(const TickSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickSize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType TickType = 2;
  void clear_ticktype();
  ::Jde::Markets::Proto::Results::ETickType ticktype() const;
  void set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_ticktype() const;
  void _internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // int32 Size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickSize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  int ticktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickString) */ {
 public:
  TickString();
  virtual ~TickString();

  TickString(const TickString& from);
  TickString(TickString&& from) noexcept
    : TickString() {
    *this = ::std::move(from);
  }

  inline TickString& operator=(const TickString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickString& operator=(TickString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickString* internal_default_instance() {
    return reinterpret_cast<const TickString*>(
               &_TickString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TickString& a, TickString& b) {
    a.Swap(&b);
  }
  inline void Swap(TickString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickString* New() const final {
    return CreateMaybeMessage<TickString>(nullptr);
  }

  TickString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickString& from);
  void MergeFrom(const TickString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_results_2eproto);
    return ::descriptor_table_results_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
  };
  // string Value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 RequestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType TickType = 2;
  void clear_ticktype();
  ::Jde::Markets::Proto::Results::ETickType ticktype() const;
  void set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_ticktype() const;
  void _internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  int ticktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageValue

// .Jde.Markets.Proto.Results.EResults Type = 1;
inline void MessageValue::clear_type() {
  type_ = 0;
}
inline ::Jde::Markets::Proto::Results::EResults MessageValue::_internal_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::EResults >(type_);
}
inline ::Jde::Markets::Proto::Results::EResults MessageValue::type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageValue.Type)
  return _internal_type();
}
inline void MessageValue::_internal_set_type(::Jde::Markets::Proto::Results::EResults value) {
  
  type_ = value;
}
inline void MessageValue::set_type(::Jde::Markets::Proto::Results::EResults value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageValue.Type)
}

// string StringValue = 2;
inline bool MessageValue::_internal_has_stringvalue() const {
  return Value_case() == kStringValue;
}
inline void MessageValue::set_has_stringvalue() {
  _oneof_case_[0] = kStringValue;
}
inline void MessageValue::clear_stringvalue() {
  if (_internal_has_stringvalue()) {
    Value_.stringvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_Value();
  }
}
inline const std::string& MessageValue::stringvalue() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageValue.StringValue)
  return _internal_stringvalue();
}
inline void MessageValue::set_stringvalue(const std::string& value) {
  _internal_set_stringvalue(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageValue.StringValue)
}
inline std::string* MessageValue::mutable_stringvalue() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageValue.StringValue)
  return _internal_mutable_stringvalue();
}
inline const std::string& MessageValue::_internal_stringvalue() const {
  if (_internal_has_stringvalue()) {
    return Value_.stringvalue_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MessageValue::_internal_set_stringvalue(const std::string& value) {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    Value_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageValue::set_stringvalue(std::string&& value) {
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageValue.StringValue)
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    Value_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.MessageValue.StringValue)
}
inline void MessageValue::set_stringvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    Value_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.MessageValue.StringValue)
}
inline void MessageValue::set_stringvalue(const char* value, size_t size) {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    Value_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.MessageValue.StringValue)
}
inline std::string* MessageValue::_internal_mutable_stringvalue() {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    Value_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Value_.stringvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageValue::release_stringvalue() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageValue.StringValue)
  if (_internal_has_stringvalue()) {
    clear_has_Value();
    return Value_.stringvalue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void MessageValue::set_allocated_stringvalue(std::string* stringvalue) {
  if (has_Value()) {
    clear_Value();
  }
  if (stringvalue != nullptr) {
    set_has_stringvalue();
    Value_.stringvalue_.UnsafeSetDefault(stringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.MessageValue.StringValue)
}

// int32 IntValue = 3;
inline bool MessageValue::_internal_has_intvalue() const {
  return Value_case() == kIntValue;
}
inline void MessageValue::set_has_intvalue() {
  _oneof_case_[0] = kIntValue;
}
inline void MessageValue::clear_intvalue() {
  if (_internal_has_intvalue()) {
    Value_.intvalue_ = 0;
    clear_has_Value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageValue::_internal_intvalue() const {
  if (_internal_has_intvalue()) {
    return Value_.intvalue_;
  }
  return 0;
}
inline void MessageValue::_internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_intvalue()) {
    clear_Value();
    set_has_intvalue();
  }
  Value_.intvalue_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageValue::intvalue() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageValue.IntValue)
  return _internal_intvalue();
}
inline void MessageValue::set_intvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageValue.IntValue)
}

inline bool MessageValue::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void MessageValue::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MessageValue::ValueCase MessageValue::Value_case() const {
  return MessageValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringResult

// .Jde.Markets.Proto.Results.EResults Type = 1;
inline void StringResult::clear_type() {
  type_ = 0;
}
inline ::Jde::Markets::Proto::Results::EResults StringResult::_internal_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::EResults >(type_);
}
inline ::Jde::Markets::Proto::Results::EResults StringResult::type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringResult.Type)
  return _internal_type();
}
inline void StringResult::_internal_set_type(::Jde::Markets::Proto::Results::EResults value) {
  
  type_ = value;
}
inline void StringResult::set_type(::Jde::Markets::Proto::Results::EResults value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringResult.Type)
}

// int32 RequestId = 2;
inline void StringResult::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StringResult::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StringResult::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringResult.RequestId)
  return _internal_requestid();
}
inline void StringResult::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void StringResult::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringResult.RequestId)
}

// string Value = 3;
inline void StringResult::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StringResult::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringResult.Value)
  return _internal_value();
}
inline void StringResult::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringResult.Value)
}
inline std::string* StringResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.StringResult.Value)
  return _internal_mutable_value();
}
inline const std::string& StringResult::_internal_value() const {
  return value_.GetNoArena();
}
inline void StringResult::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StringResult::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.StringResult.Value)
}
inline void StringResult::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.StringResult.Value)
}
inline void StringResult::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.StringResult.Value)
}
inline std::string* StringResult::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringResult::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.StringResult.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringResult::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.StringResult.Value)
}

// -------------------------------------------------------------------

// TagValue

// string Tag = 1;
inline void TagValue::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TagValue::tag() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TagValue.Tag)
  return _internal_tag();
}
inline void TagValue::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TagValue.Tag)
}
inline std::string* TagValue::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TagValue.Tag)
  return _internal_mutable_tag();
}
inline const std::string& TagValue::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void TagValue::_internal_set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TagValue::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.TagValue.Tag)
}
inline void TagValue::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.TagValue.Tag)
}
inline void TagValue::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.TagValue.Tag)
}
inline std::string* TagValue::_internal_mutable_tag() {
  
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TagValue::release_tag() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TagValue.Tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TagValue::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TagValue.Tag)
}

// string Value = 2;
inline void TagValue::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TagValue::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TagValue.Value)
  return _internal_value();
}
inline void TagValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TagValue.Value)
}
inline std::string* TagValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TagValue.Value)
  return _internal_mutable_value();
}
inline const std::string& TagValue::_internal_value() const {
  return value_.GetNoArena();
}
inline void TagValue::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TagValue::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.TagValue.Value)
}
inline void TagValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.TagValue.Value)
}
inline void TagValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.TagValue.Value)
}
inline std::string* TagValue::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TagValue::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TagValue.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TagValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TagValue.Value)
}

// -------------------------------------------------------------------

// ContractDetails

// int32 RequestId = 1;
inline void ContractDetails::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.RequestId)
  return _internal_requestid();
}
inline void ContractDetails::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void ContractDetails::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.RequestId)
}

// .Jde.Markets.Proto.Contract Contract = 2;
inline bool ContractDetails::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool ContractDetails::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& ContractDetails::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Jde::Markets::Proto::Contract*>(
      &::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& ContractDetails::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Contract)
  return _internal_contract();
}
inline ::Jde::Markets::Proto::Contract* ContractDetails::release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* ContractDetails::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaNoVirtual());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* ContractDetails::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Contract)
  return _internal_mutable_contract();
}
inline void ContractDetails::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Contract)
}

// string MarketName = 3;
inline void ContractDetails::clear_marketname() {
  marketname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::marketname() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.MarketName)
  return _internal_marketname();
}
inline void ContractDetails::set_marketname(const std::string& value) {
  _internal_set_marketname(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.MarketName)
}
inline std::string* ContractDetails::mutable_marketname() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.MarketName)
  return _internal_mutable_marketname();
}
inline const std::string& ContractDetails::_internal_marketname() const {
  return marketname_.GetNoArena();
}
inline void ContractDetails::_internal_set_marketname(const std::string& value) {
  
  marketname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_marketname(std::string&& value) {
  
  marketname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.MarketName)
}
inline void ContractDetails::set_marketname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marketname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.MarketName)
}
inline void ContractDetails::set_marketname(const char* value, size_t size) {
  
  marketname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.MarketName)
}
inline std::string* ContractDetails::_internal_mutable_marketname() {
  
  return marketname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_marketname() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.MarketName)
  
  return marketname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_marketname(std::string* marketname) {
  if (marketname != nullptr) {
    
  } else {
    
  }
  marketname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketname);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.MarketName)
}

// double MinTick = 4;
inline void ContractDetails::clear_mintick() {
  mintick_ = 0;
}
inline double ContractDetails::_internal_mintick() const {
  return mintick_;
}
inline double ContractDetails::mintick() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.MinTick)
  return _internal_mintick();
}
inline void ContractDetails::_internal_set_mintick(double value) {
  
  mintick_ = value;
}
inline void ContractDetails::set_mintick(double value) {
  _internal_set_mintick(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.MinTick)
}

// string OrderTypes = 5;
inline void ContractDetails::clear_ordertypes() {
  ordertypes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::ordertypes() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
  return _internal_ordertypes();
}
inline void ContractDetails::set_ordertypes(const std::string& value) {
  _internal_set_ordertypes(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
}
inline std::string* ContractDetails::mutable_ordertypes() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
  return _internal_mutable_ordertypes();
}
inline const std::string& ContractDetails::_internal_ordertypes() const {
  return ordertypes_.GetNoArena();
}
inline void ContractDetails::_internal_set_ordertypes(const std::string& value) {
  
  ordertypes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_ordertypes(std::string&& value) {
  
  ordertypes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
}
inline void ContractDetails::set_ordertypes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordertypes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
}
inline void ContractDetails::set_ordertypes(const char* value, size_t size) {
  
  ordertypes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
}
inline std::string* ContractDetails::_internal_mutable_ordertypes() {
  
  return ordertypes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_ordertypes() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
  
  return ordertypes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_ordertypes(std::string* ordertypes) {
  if (ordertypes != nullptr) {
    
  } else {
    
  }
  ordertypes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordertypes);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.OrderTypes)
}

// string ValidExchanges = 6;
inline void ContractDetails::clear_validexchanges() {
  validexchanges_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::validexchanges() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
  return _internal_validexchanges();
}
inline void ContractDetails::set_validexchanges(const std::string& value) {
  _internal_set_validexchanges(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
}
inline std::string* ContractDetails::mutable_validexchanges() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
  return _internal_mutable_validexchanges();
}
inline const std::string& ContractDetails::_internal_validexchanges() const {
  return validexchanges_.GetNoArena();
}
inline void ContractDetails::_internal_set_validexchanges(const std::string& value) {
  
  validexchanges_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_validexchanges(std::string&& value) {
  
  validexchanges_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
}
inline void ContractDetails::set_validexchanges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validexchanges_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
}
inline void ContractDetails::set_validexchanges(const char* value, size_t size) {
  
  validexchanges_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
}
inline std::string* ContractDetails::_internal_mutable_validexchanges() {
  
  return validexchanges_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_validexchanges() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
  
  return validexchanges_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_validexchanges(std::string* validexchanges) {
  if (validexchanges != nullptr) {
    
  } else {
    
  }
  validexchanges_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validexchanges);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.ValidExchanges)
}

// int64 PriceMagnifier = 7;
inline void ContractDetails::clear_pricemagnifier() {
  pricemagnifier_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContractDetails::_internal_pricemagnifier() const {
  return pricemagnifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContractDetails::pricemagnifier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.PriceMagnifier)
  return _internal_pricemagnifier();
}
inline void ContractDetails::_internal_set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pricemagnifier_ = value;
}
inline void ContractDetails::set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pricemagnifier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.PriceMagnifier)
}

// uint32 UnderConId = 8;
inline void ContractDetails::clear_underconid() {
  underconid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractDetails::_internal_underconid() const {
  return underconid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractDetails::underconid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.UnderConId)
  return _internal_underconid();
}
inline void ContractDetails::_internal_set_underconid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  underconid_ = value;
}
inline void ContractDetails::set_underconid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_underconid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.UnderConId)
}

// string LongName = 9;
inline void ContractDetails::clear_longname() {
  longname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::longname() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.LongName)
  return _internal_longname();
}
inline void ContractDetails::set_longname(const std::string& value) {
  _internal_set_longname(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.LongName)
}
inline std::string* ContractDetails::mutable_longname() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.LongName)
  return _internal_mutable_longname();
}
inline const std::string& ContractDetails::_internal_longname() const {
  return longname_.GetNoArena();
}
inline void ContractDetails::_internal_set_longname(const std::string& value) {
  
  longname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_longname(std::string&& value) {
  
  longname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.LongName)
}
inline void ContractDetails::set_longname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  longname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.LongName)
}
inline void ContractDetails::set_longname(const char* value, size_t size) {
  
  longname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.LongName)
}
inline std::string* ContractDetails::_internal_mutable_longname() {
  
  return longname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_longname() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.LongName)
  
  return longname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_longname(std::string* longname) {
  if (longname != nullptr) {
    
  } else {
    
  }
  longname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longname);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.LongName)
}

// string ContractMonth = 10;
inline void ContractDetails::clear_contractmonth() {
  contractmonth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::contractmonth() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
  return _internal_contractmonth();
}
inline void ContractDetails::set_contractmonth(const std::string& value) {
  _internal_set_contractmonth(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
}
inline std::string* ContractDetails::mutable_contractmonth() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
  return _internal_mutable_contractmonth();
}
inline const std::string& ContractDetails::_internal_contractmonth() const {
  return contractmonth_.GetNoArena();
}
inline void ContractDetails::_internal_set_contractmonth(const std::string& value) {
  
  contractmonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_contractmonth(std::string&& value) {
  
  contractmonth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
}
inline void ContractDetails::set_contractmonth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractmonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
}
inline void ContractDetails::set_contractmonth(const char* value, size_t size) {
  
  contractmonth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
}
inline std::string* ContractDetails::_internal_mutable_contractmonth() {
  
  return contractmonth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_contractmonth() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
  
  return contractmonth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_contractmonth(std::string* contractmonth) {
  if (contractmonth != nullptr) {
    
  } else {
    
  }
  contractmonth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractmonth);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.ContractMonth)
}

// string Industry = 11;
inline void ContractDetails::clear_industry() {
  industry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::industry() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Industry)
  return _internal_industry();
}
inline void ContractDetails::set_industry(const std::string& value) {
  _internal_set_industry(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Industry)
}
inline std::string* ContractDetails::mutable_industry() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Industry)
  return _internal_mutable_industry();
}
inline const std::string& ContractDetails::_internal_industry() const {
  return industry_.GetNoArena();
}
inline void ContractDetails::_internal_set_industry(const std::string& value) {
  
  industry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_industry(std::string&& value) {
  
  industry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.Industry)
}
inline void ContractDetails::set_industry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  industry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.Industry)
}
inline void ContractDetails::set_industry(const char* value, size_t size) {
  
  industry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.Industry)
}
inline std::string* ContractDetails::_internal_mutable_industry() {
  
  return industry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_industry() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Industry)
  
  return industry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_industry(std::string* industry) {
  if (industry != nullptr) {
    
  } else {
    
  }
  industry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), industry);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Industry)
}

// string Category = 12;
inline void ContractDetails::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::category() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Category)
  return _internal_category();
}
inline void ContractDetails::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Category)
}
inline std::string* ContractDetails::mutable_category() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Category)
  return _internal_mutable_category();
}
inline const std::string& ContractDetails::_internal_category() const {
  return category_.GetNoArena();
}
inline void ContractDetails::_internal_set_category(const std::string& value) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_category(std::string&& value) {
  
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.Category)
}
inline void ContractDetails::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.Category)
}
inline void ContractDetails::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.Category)
}
inline std::string* ContractDetails::_internal_mutable_category() {
  
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_category() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Category)
  
  return category_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Category)
}

// string Subcategory = 13;
inline void ContractDetails::clear_subcategory() {
  subcategory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::subcategory() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
  return _internal_subcategory();
}
inline void ContractDetails::set_subcategory(const std::string& value) {
  _internal_set_subcategory(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
}
inline std::string* ContractDetails::mutable_subcategory() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
  return _internal_mutable_subcategory();
}
inline const std::string& ContractDetails::_internal_subcategory() const {
  return subcategory_.GetNoArena();
}
inline void ContractDetails::_internal_set_subcategory(const std::string& value) {
  
  subcategory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_subcategory(std::string&& value) {
  
  subcategory_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
}
inline void ContractDetails::set_subcategory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subcategory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
}
inline void ContractDetails::set_subcategory(const char* value, size_t size) {
  
  subcategory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
}
inline std::string* ContractDetails::_internal_mutable_subcategory() {
  
  return subcategory_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_subcategory() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
  
  return subcategory_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_subcategory(std::string* subcategory) {
  if (subcategory != nullptr) {
    
  } else {
    
  }
  subcategory_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subcategory);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Subcategory)
}

// string TimeZoneId = 14;
inline void ContractDetails::clear_timezoneid() {
  timezoneid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::timezoneid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
  return _internal_timezoneid();
}
inline void ContractDetails::set_timezoneid(const std::string& value) {
  _internal_set_timezoneid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
}
inline std::string* ContractDetails::mutable_timezoneid() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
  return _internal_mutable_timezoneid();
}
inline const std::string& ContractDetails::_internal_timezoneid() const {
  return timezoneid_.GetNoArena();
}
inline void ContractDetails::_internal_set_timezoneid(const std::string& value) {
  
  timezoneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_timezoneid(std::string&& value) {
  
  timezoneid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
}
inline void ContractDetails::set_timezoneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezoneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
}
inline void ContractDetails::set_timezoneid(const char* value, size_t size) {
  
  timezoneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
}
inline std::string* ContractDetails::_internal_mutable_timezoneid() {
  
  return timezoneid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_timezoneid() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
  
  return timezoneid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_timezoneid(std::string* timezoneid) {
  if (timezoneid != nullptr) {
    
  } else {
    
  }
  timezoneid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezoneid);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.TimeZoneId)
}

// string TradingHours = 15;
inline void ContractDetails::clear_tradinghours() {
  tradinghours_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::tradinghours() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
  return _internal_tradinghours();
}
inline void ContractDetails::set_tradinghours(const std::string& value) {
  _internal_set_tradinghours(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
}
inline std::string* ContractDetails::mutable_tradinghours() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
  return _internal_mutable_tradinghours();
}
inline const std::string& ContractDetails::_internal_tradinghours() const {
  return tradinghours_.GetNoArena();
}
inline void ContractDetails::_internal_set_tradinghours(const std::string& value) {
  
  tradinghours_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_tradinghours(std::string&& value) {
  
  tradinghours_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
}
inline void ContractDetails::set_tradinghours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradinghours_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
}
inline void ContractDetails::set_tradinghours(const char* value, size_t size) {
  
  tradinghours_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
}
inline std::string* ContractDetails::_internal_mutable_tradinghours() {
  
  return tradinghours_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_tradinghours() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
  
  return tradinghours_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_tradinghours(std::string* tradinghours) {
  if (tradinghours != nullptr) {
    
  } else {
    
  }
  tradinghours_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradinghours);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.TradingHours)
}

// string LiquidHours = 16;
inline void ContractDetails::clear_liquidhours() {
  liquidhours_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::liquidhours() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
  return _internal_liquidhours();
}
inline void ContractDetails::set_liquidhours(const std::string& value) {
  _internal_set_liquidhours(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
}
inline std::string* ContractDetails::mutable_liquidhours() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
  return _internal_mutable_liquidhours();
}
inline const std::string& ContractDetails::_internal_liquidhours() const {
  return liquidhours_.GetNoArena();
}
inline void ContractDetails::_internal_set_liquidhours(const std::string& value) {
  
  liquidhours_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_liquidhours(std::string&& value) {
  
  liquidhours_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
}
inline void ContractDetails::set_liquidhours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  liquidhours_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
}
inline void ContractDetails::set_liquidhours(const char* value, size_t size) {
  
  liquidhours_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
}
inline std::string* ContractDetails::_internal_mutable_liquidhours() {
  
  return liquidhours_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_liquidhours() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
  
  return liquidhours_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_liquidhours(std::string* liquidhours) {
  if (liquidhours != nullptr) {
    
  } else {
    
  }
  liquidhours_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), liquidhours);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.LiquidHours)
}

// string EvRule = 17;
inline void ContractDetails::clear_evrule() {
  evrule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::evrule() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.EvRule)
  return _internal_evrule();
}
inline void ContractDetails::set_evrule(const std::string& value) {
  _internal_set_evrule(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.EvRule)
}
inline std::string* ContractDetails::mutable_evrule() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.EvRule)
  return _internal_mutable_evrule();
}
inline const std::string& ContractDetails::_internal_evrule() const {
  return evrule_.GetNoArena();
}
inline void ContractDetails::_internal_set_evrule(const std::string& value) {
  
  evrule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_evrule(std::string&& value) {
  
  evrule_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.EvRule)
}
inline void ContractDetails::set_evrule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  evrule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.EvRule)
}
inline void ContractDetails::set_evrule(const char* value, size_t size) {
  
  evrule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.EvRule)
}
inline std::string* ContractDetails::_internal_mutable_evrule() {
  
  return evrule_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_evrule() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.EvRule)
  
  return evrule_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_evrule(std::string* evrule) {
  if (evrule != nullptr) {
    
  } else {
    
  }
  evrule_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), evrule);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.EvRule)
}

// double EvMultiplier = 18;
inline void ContractDetails::clear_evmultiplier() {
  evmultiplier_ = 0;
}
inline double ContractDetails::_internal_evmultiplier() const {
  return evmultiplier_;
}
inline double ContractDetails::evmultiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.EvMultiplier)
  return _internal_evmultiplier();
}
inline void ContractDetails::_internal_set_evmultiplier(double value) {
  
  evmultiplier_ = value;
}
inline void ContractDetails::set_evmultiplier(double value) {
  _internal_set_evmultiplier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.EvMultiplier)
}

// int32 MdSizeMultiplier = 19;
inline void ContractDetails::clear_mdsizemultiplier() {
  mdsizemultiplier_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::_internal_mdsizemultiplier() const {
  return mdsizemultiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::mdsizemultiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.MdSizeMultiplier)
  return _internal_mdsizemultiplier();
}
inline void ContractDetails::_internal_set_mdsizemultiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdsizemultiplier_ = value;
}
inline void ContractDetails::set_mdsizemultiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mdsizemultiplier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.MdSizeMultiplier)
}

// int32 AggGroup = 20;
inline void ContractDetails::clear_agggroup() {
  agggroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::_internal_agggroup() const {
  return agggroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::agggroup() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.AggGroup)
  return _internal_agggroup();
}
inline void ContractDetails::_internal_set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agggroup_ = value;
}
inline void ContractDetails::set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agggroup(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.AggGroup)
}

// string UnderSymbol = 21;
inline void ContractDetails::clear_undersymbol() {
  undersymbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::undersymbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
  return _internal_undersymbol();
}
inline void ContractDetails::set_undersymbol(const std::string& value) {
  _internal_set_undersymbol(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
}
inline std::string* ContractDetails::mutable_undersymbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
  return _internal_mutable_undersymbol();
}
inline const std::string& ContractDetails::_internal_undersymbol() const {
  return undersymbol_.GetNoArena();
}
inline void ContractDetails::_internal_set_undersymbol(const std::string& value) {
  
  undersymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_undersymbol(std::string&& value) {
  
  undersymbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
}
inline void ContractDetails::set_undersymbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  undersymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
}
inline void ContractDetails::set_undersymbol(const char* value, size_t size) {
  
  undersymbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
}
inline std::string* ContractDetails::_internal_mutable_undersymbol() {
  
  return undersymbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_undersymbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
  
  return undersymbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_undersymbol(std::string* undersymbol) {
  if (undersymbol != nullptr) {
    
  } else {
    
  }
  undersymbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), undersymbol);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.UnderSymbol)
}

// string UnderSecType = 22;
inline void ContractDetails::clear_undersectype() {
  undersectype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::undersectype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
  return _internal_undersectype();
}
inline void ContractDetails::set_undersectype(const std::string& value) {
  _internal_set_undersectype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
}
inline std::string* ContractDetails::mutable_undersectype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
  return _internal_mutable_undersectype();
}
inline const std::string& ContractDetails::_internal_undersectype() const {
  return undersectype_.GetNoArena();
}
inline void ContractDetails::_internal_set_undersectype(const std::string& value) {
  
  undersectype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_undersectype(std::string&& value) {
  
  undersectype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
}
inline void ContractDetails::set_undersectype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  undersectype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
}
inline void ContractDetails::set_undersectype(const char* value, size_t size) {
  
  undersectype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
}
inline std::string* ContractDetails::_internal_mutable_undersectype() {
  
  return undersectype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_undersectype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
  
  return undersectype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_undersectype(std::string* undersectype) {
  if (undersectype != nullptr) {
    
  } else {
    
  }
  undersectype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), undersectype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.UnderSecType)
}

// string MarketRuleIds = 23;
inline void ContractDetails::clear_marketruleids() {
  marketruleids_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::marketruleids() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
  return _internal_marketruleids();
}
inline void ContractDetails::set_marketruleids(const std::string& value) {
  _internal_set_marketruleids(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
}
inline std::string* ContractDetails::mutable_marketruleids() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
  return _internal_mutable_marketruleids();
}
inline const std::string& ContractDetails::_internal_marketruleids() const {
  return marketruleids_.GetNoArena();
}
inline void ContractDetails::_internal_set_marketruleids(const std::string& value) {
  
  marketruleids_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_marketruleids(std::string&& value) {
  
  marketruleids_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
}
inline void ContractDetails::set_marketruleids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marketruleids_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
}
inline void ContractDetails::set_marketruleids(const char* value, size_t size) {
  
  marketruleids_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
}
inline std::string* ContractDetails::_internal_mutable_marketruleids() {
  
  return marketruleids_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_marketruleids() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
  
  return marketruleids_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_marketruleids(std::string* marketruleids) {
  if (marketruleids != nullptr) {
    
  } else {
    
  }
  marketruleids_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketruleids);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.MarketRuleIds)
}

// string RealExpirationDate = 24;
inline void ContractDetails::clear_realexpirationdate() {
  realexpirationdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::realexpirationdate() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
  return _internal_realexpirationdate();
}
inline void ContractDetails::set_realexpirationdate(const std::string& value) {
  _internal_set_realexpirationdate(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
}
inline std::string* ContractDetails::mutable_realexpirationdate() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
  return _internal_mutable_realexpirationdate();
}
inline const std::string& ContractDetails::_internal_realexpirationdate() const {
  return realexpirationdate_.GetNoArena();
}
inline void ContractDetails::_internal_set_realexpirationdate(const std::string& value) {
  
  realexpirationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_realexpirationdate(std::string&& value) {
  
  realexpirationdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
}
inline void ContractDetails::set_realexpirationdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  realexpirationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
}
inline void ContractDetails::set_realexpirationdate(const char* value, size_t size) {
  
  realexpirationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
}
inline std::string* ContractDetails::_internal_mutable_realexpirationdate() {
  
  return realexpirationdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_realexpirationdate() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
  
  return realexpirationdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_realexpirationdate(std::string* realexpirationdate) {
  if (realexpirationdate != nullptr) {
    
  } else {
    
  }
  realexpirationdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), realexpirationdate);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.RealExpirationDate)
}

// string LastTradeTime = 25;
inline void ContractDetails::clear_lasttradetime() {
  lasttradetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::lasttradetime() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
  return _internal_lasttradetime();
}
inline void ContractDetails::set_lasttradetime(const std::string& value) {
  _internal_set_lasttradetime(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
}
inline std::string* ContractDetails::mutable_lasttradetime() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
  return _internal_mutable_lasttradetime();
}
inline const std::string& ContractDetails::_internal_lasttradetime() const {
  return lasttradetime_.GetNoArena();
}
inline void ContractDetails::_internal_set_lasttradetime(const std::string& value) {
  
  lasttradetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_lasttradetime(std::string&& value) {
  
  lasttradetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
}
inline void ContractDetails::set_lasttradetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lasttradetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
}
inline void ContractDetails::set_lasttradetime(const char* value, size_t size) {
  
  lasttradetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
}
inline std::string* ContractDetails::_internal_mutable_lasttradetime() {
  
  return lasttradetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_lasttradetime() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
  
  return lasttradetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_lasttradetime(std::string* lasttradetime) {
  if (lasttradetime != nullptr) {
    
  } else {
    
  }
  lasttradetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lasttradetime);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.LastTradeTime)
}

// repeated .Jde.Markets.Proto.Results.TagValue secIdList = 26;
inline int ContractDetails::_internal_secidlist_size() const {
  return secidlist_.size();
}
inline int ContractDetails::secidlist_size() const {
  return _internal_secidlist_size();
}
inline void ContractDetails::clear_secidlist() {
  secidlist_.Clear();
}
inline ::Jde::Markets::Proto::Results::TagValue* ContractDetails::mutable_secidlist(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.secIdList)
  return secidlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >*
ContractDetails::mutable_secidlist() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.ContractDetails.secIdList)
  return &secidlist_;
}
inline const ::Jde::Markets::Proto::Results::TagValue& ContractDetails::_internal_secidlist(int index) const {
  return secidlist_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::TagValue& ContractDetails::secidlist(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.secIdList)
  return _internal_secidlist(index);
}
inline ::Jde::Markets::Proto::Results::TagValue* ContractDetails::_internal_add_secidlist() {
  return secidlist_.Add();
}
inline ::Jde::Markets::Proto::Results::TagValue* ContractDetails::add_secidlist() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.ContractDetails.secIdList)
  return _internal_add_secidlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >&
ContractDetails::secidlist() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.ContractDetails.secIdList)
  return secidlist_;
}

// string Cusip = 27;
inline void ContractDetails::clear_cusip() {
  cusip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::cusip() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Cusip)
  return _internal_cusip();
}
inline void ContractDetails::set_cusip(const std::string& value) {
  _internal_set_cusip(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Cusip)
}
inline std::string* ContractDetails::mutable_cusip() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Cusip)
  return _internal_mutable_cusip();
}
inline const std::string& ContractDetails::_internal_cusip() const {
  return cusip_.GetNoArena();
}
inline void ContractDetails::_internal_set_cusip(const std::string& value) {
  
  cusip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_cusip(std::string&& value) {
  
  cusip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.Cusip)
}
inline void ContractDetails::set_cusip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cusip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.Cusip)
}
inline void ContractDetails::set_cusip(const char* value, size_t size) {
  
  cusip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.Cusip)
}
inline std::string* ContractDetails::_internal_mutable_cusip() {
  
  return cusip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_cusip() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Cusip)
  
  return cusip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_cusip(std::string* cusip) {
  if (cusip != nullptr) {
    
  } else {
    
  }
  cusip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cusip);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Cusip)
}

// string Ratings = 28;
inline void ContractDetails::clear_ratings() {
  ratings_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::ratings() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Ratings)
  return _internal_ratings();
}
inline void ContractDetails::set_ratings(const std::string& value) {
  _internal_set_ratings(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Ratings)
}
inline std::string* ContractDetails::mutable_ratings() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Ratings)
  return _internal_mutable_ratings();
}
inline const std::string& ContractDetails::_internal_ratings() const {
  return ratings_.GetNoArena();
}
inline void ContractDetails::_internal_set_ratings(const std::string& value) {
  
  ratings_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_ratings(std::string&& value) {
  
  ratings_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.Ratings)
}
inline void ContractDetails::set_ratings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ratings_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.Ratings)
}
inline void ContractDetails::set_ratings(const char* value, size_t size) {
  
  ratings_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.Ratings)
}
inline std::string* ContractDetails::_internal_mutable_ratings() {
  
  return ratings_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_ratings() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Ratings)
  
  return ratings_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_ratings(std::string* ratings) {
  if (ratings != nullptr) {
    
  } else {
    
  }
  ratings_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ratings);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Ratings)
}

// string DescAppend = 29;
inline void ContractDetails::clear_descappend() {
  descappend_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::descappend() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
  return _internal_descappend();
}
inline void ContractDetails::set_descappend(const std::string& value) {
  _internal_set_descappend(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
}
inline std::string* ContractDetails::mutable_descappend() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
  return _internal_mutable_descappend();
}
inline const std::string& ContractDetails::_internal_descappend() const {
  return descappend_.GetNoArena();
}
inline void ContractDetails::_internal_set_descappend(const std::string& value) {
  
  descappend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_descappend(std::string&& value) {
  
  descappend_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
}
inline void ContractDetails::set_descappend(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descappend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
}
inline void ContractDetails::set_descappend(const char* value, size_t size) {
  
  descappend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
}
inline std::string* ContractDetails::_internal_mutable_descappend() {
  
  return descappend_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_descappend() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
  
  return descappend_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_descappend(std::string* descappend) {
  if (descappend != nullptr) {
    
  } else {
    
  }
  descappend_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descappend);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.DescAppend)
}

// string BondType = 30;
inline void ContractDetails::clear_bondtype() {
  bondtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::bondtype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.BondType)
  return _internal_bondtype();
}
inline void ContractDetails::set_bondtype(const std::string& value) {
  _internal_set_bondtype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.BondType)
}
inline std::string* ContractDetails::mutable_bondtype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.BondType)
  return _internal_mutable_bondtype();
}
inline const std::string& ContractDetails::_internal_bondtype() const {
  return bondtype_.GetNoArena();
}
inline void ContractDetails::_internal_set_bondtype(const std::string& value) {
  
  bondtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_bondtype(std::string&& value) {
  
  bondtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.BondType)
}
inline void ContractDetails::set_bondtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bondtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.BondType)
}
inline void ContractDetails::set_bondtype(const char* value, size_t size) {
  
  bondtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.BondType)
}
inline std::string* ContractDetails::_internal_mutable_bondtype() {
  
  return bondtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_bondtype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.BondType)
  
  return bondtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_bondtype(std::string* bondtype) {
  if (bondtype != nullptr) {
    
  } else {
    
  }
  bondtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bondtype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.BondType)
}

// string CouponType = 31;
inline void ContractDetails::clear_coupontype() {
  coupontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::coupontype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.CouponType)
  return _internal_coupontype();
}
inline void ContractDetails::set_coupontype(const std::string& value) {
  _internal_set_coupontype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.CouponType)
}
inline std::string* ContractDetails::mutable_coupontype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.CouponType)
  return _internal_mutable_coupontype();
}
inline const std::string& ContractDetails::_internal_coupontype() const {
  return coupontype_.GetNoArena();
}
inline void ContractDetails::_internal_set_coupontype(const std::string& value) {
  
  coupontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_coupontype(std::string&& value) {
  
  coupontype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.CouponType)
}
inline void ContractDetails::set_coupontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coupontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.CouponType)
}
inline void ContractDetails::set_coupontype(const char* value, size_t size) {
  
  coupontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.CouponType)
}
inline std::string* ContractDetails::_internal_mutable_coupontype() {
  
  return coupontype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_coupontype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.CouponType)
  
  return coupontype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_coupontype(std::string* coupontype) {
  if (coupontype != nullptr) {
    
  } else {
    
  }
  coupontype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coupontype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.CouponType)
}

// bool Callable = 32;
inline void ContractDetails::clear_callable() {
  callable_ = false;
}
inline bool ContractDetails::_internal_callable() const {
  return callable_;
}
inline bool ContractDetails::callable() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Callable)
  return _internal_callable();
}
inline void ContractDetails::_internal_set_callable(bool value) {
  
  callable_ = value;
}
inline void ContractDetails::set_callable(bool value) {
  _internal_set_callable(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Callable)
}

// bool Putable = 33;
inline void ContractDetails::clear_putable() {
  putable_ = false;
}
inline bool ContractDetails::_internal_putable() const {
  return putable_;
}
inline bool ContractDetails::putable() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Putable)
  return _internal_putable();
}
inline void ContractDetails::_internal_set_putable(bool value) {
  
  putable_ = value;
}
inline void ContractDetails::set_putable(bool value) {
  _internal_set_putable(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Putable)
}

// double Coupon = 34;
inline void ContractDetails::clear_coupon() {
  coupon_ = 0;
}
inline double ContractDetails::_internal_coupon() const {
  return coupon_;
}
inline double ContractDetails::coupon() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Coupon)
  return _internal_coupon();
}
inline void ContractDetails::_internal_set_coupon(double value) {
  
  coupon_ = value;
}
inline void ContractDetails::set_coupon(double value) {
  _internal_set_coupon(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Coupon)
}

// bool Convertible = 35;
inline void ContractDetails::clear_convertible() {
  convertible_ = false;
}
inline bool ContractDetails::_internal_convertible() const {
  return convertible_;
}
inline bool ContractDetails::convertible() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Convertible)
  return _internal_convertible();
}
inline void ContractDetails::_internal_set_convertible(bool value) {
  
  convertible_ = value;
}
inline void ContractDetails::set_convertible(bool value) {
  _internal_set_convertible(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Convertible)
}

// string Maturity = 36;
inline void ContractDetails::clear_maturity() {
  maturity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::maturity() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Maturity)
  return _internal_maturity();
}
inline void ContractDetails::set_maturity(const std::string& value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Maturity)
}
inline std::string* ContractDetails::mutable_maturity() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Maturity)
  return _internal_mutable_maturity();
}
inline const std::string& ContractDetails::_internal_maturity() const {
  return maturity_.GetNoArena();
}
inline void ContractDetails::_internal_set_maturity(const std::string& value) {
  
  maturity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_maturity(std::string&& value) {
  
  maturity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.Maturity)
}
inline void ContractDetails::set_maturity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maturity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.Maturity)
}
inline void ContractDetails::set_maturity(const char* value, size_t size) {
  
  maturity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.Maturity)
}
inline std::string* ContractDetails::_internal_mutable_maturity() {
  
  return maturity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_maturity() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Maturity)
  
  return maturity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_maturity(std::string* maturity) {
  if (maturity != nullptr) {
    
  } else {
    
  }
  maturity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maturity);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Maturity)
}

// string IssueDate = 37;
inline void ContractDetails::clear_issuedate() {
  issuedate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::issuedate() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
  return _internal_issuedate();
}
inline void ContractDetails::set_issuedate(const std::string& value) {
  _internal_set_issuedate(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
}
inline std::string* ContractDetails::mutable_issuedate() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
  return _internal_mutable_issuedate();
}
inline const std::string& ContractDetails::_internal_issuedate() const {
  return issuedate_.GetNoArena();
}
inline void ContractDetails::_internal_set_issuedate(const std::string& value) {
  
  issuedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_issuedate(std::string&& value) {
  
  issuedate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
}
inline void ContractDetails::set_issuedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issuedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
}
inline void ContractDetails::set_issuedate(const char* value, size_t size) {
  
  issuedate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
}
inline std::string* ContractDetails::_internal_mutable_issuedate() {
  
  return issuedate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_issuedate() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
  
  return issuedate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_issuedate(std::string* issuedate) {
  if (issuedate != nullptr) {
    
  } else {
    
  }
  issuedate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuedate);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.IssueDate)
}

// string NextOptionDate = 38;
inline void ContractDetails::clear_nextoptiondate() {
  nextoptiondate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::nextoptiondate() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
  return _internal_nextoptiondate();
}
inline void ContractDetails::set_nextoptiondate(const std::string& value) {
  _internal_set_nextoptiondate(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
}
inline std::string* ContractDetails::mutable_nextoptiondate() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
  return _internal_mutable_nextoptiondate();
}
inline const std::string& ContractDetails::_internal_nextoptiondate() const {
  return nextoptiondate_.GetNoArena();
}
inline void ContractDetails::_internal_set_nextoptiondate(const std::string& value) {
  
  nextoptiondate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_nextoptiondate(std::string&& value) {
  
  nextoptiondate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
}
inline void ContractDetails::set_nextoptiondate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nextoptiondate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
}
inline void ContractDetails::set_nextoptiondate(const char* value, size_t size) {
  
  nextoptiondate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
}
inline std::string* ContractDetails::_internal_mutable_nextoptiondate() {
  
  return nextoptiondate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_nextoptiondate() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
  
  return nextoptiondate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_nextoptiondate(std::string* nextoptiondate) {
  if (nextoptiondate != nullptr) {
    
  } else {
    
  }
  nextoptiondate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nextoptiondate);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.NextOptionDate)
}

// string NextOptionType = 39;
inline void ContractDetails::clear_nextoptiontype() {
  nextoptiontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::nextoptiontype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
  return _internal_nextoptiontype();
}
inline void ContractDetails::set_nextoptiontype(const std::string& value) {
  _internal_set_nextoptiontype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
}
inline std::string* ContractDetails::mutable_nextoptiontype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
  return _internal_mutable_nextoptiontype();
}
inline const std::string& ContractDetails::_internal_nextoptiontype() const {
  return nextoptiontype_.GetNoArena();
}
inline void ContractDetails::_internal_set_nextoptiontype(const std::string& value) {
  
  nextoptiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_nextoptiontype(std::string&& value) {
  
  nextoptiontype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
}
inline void ContractDetails::set_nextoptiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nextoptiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
}
inline void ContractDetails::set_nextoptiontype(const char* value, size_t size) {
  
  nextoptiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
}
inline std::string* ContractDetails::_internal_mutable_nextoptiontype() {
  
  return nextoptiontype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_nextoptiontype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
  
  return nextoptiontype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_nextoptiontype(std::string* nextoptiontype) {
  if (nextoptiontype != nullptr) {
    
  } else {
    
  }
  nextoptiontype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nextoptiontype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.NextOptionType)
}

// bool NextOptionPartial = 40;
inline void ContractDetails::clear_nextoptionpartial() {
  nextoptionpartial_ = false;
}
inline bool ContractDetails::_internal_nextoptionpartial() const {
  return nextoptionpartial_;
}
inline bool ContractDetails::nextoptionpartial() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.NextOptionPartial)
  return _internal_nextoptionpartial();
}
inline void ContractDetails::_internal_set_nextoptionpartial(bool value) {
  
  nextoptionpartial_ = value;
}
inline void ContractDetails::set_nextoptionpartial(bool value) {
  _internal_set_nextoptionpartial(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.NextOptionPartial)
}

// string Notes = 41;
inline void ContractDetails::clear_notes() {
  notes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContractDetails::notes() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetails.Notes)
  return _internal_notes();
}
inline void ContractDetails::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetails.Notes)
}
inline std::string* ContractDetails::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetails.Notes)
  return _internal_mutable_notes();
}
inline const std::string& ContractDetails::_internal_notes() const {
  return notes_.GetNoArena();
}
inline void ContractDetails::_internal_set_notes(const std::string& value) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractDetails::set_notes(std::string&& value) {
  
  notes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.ContractDetails.Notes)
}
inline void ContractDetails::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.ContractDetails.Notes)
}
inline void ContractDetails::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.ContractDetails.Notes)
}
inline std::string* ContractDetails::_internal_mutable_notes() {
  
  return notes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractDetails::release_notes() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetails.Notes)
  
  return notes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractDetails::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetails.Notes)
}

// -------------------------------------------------------------------

// Position

// string AccountNumber = 1;
inline void Position::clear_accountnumber() {
  accountnumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Position::accountnumber() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.AccountNumber)
  return _internal_accountnumber();
}
inline void Position::set_accountnumber(const std::string& value) {
  _internal_set_accountnumber(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Position.AccountNumber)
}
inline std::string* Position::mutable_accountnumber() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Position.AccountNumber)
  return _internal_mutable_accountnumber();
}
inline const std::string& Position::_internal_accountnumber() const {
  return accountnumber_.GetNoArena();
}
inline void Position::_internal_set_accountnumber(const std::string& value) {
  
  accountnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Position::set_accountnumber(std::string&& value) {
  
  accountnumber_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Position.AccountNumber)
}
inline void Position::set_accountnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Position.AccountNumber)
}
inline void Position::set_accountnumber(const char* value, size_t size) {
  
  accountnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Position.AccountNumber)
}
inline std::string* Position::_internal_mutable_accountnumber() {
  
  return accountnumber_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Position::release_accountnumber() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Position.AccountNumber)
  
  return accountnumber_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_accountnumber(std::string* accountnumber) {
  if (accountnumber != nullptr) {
    
  } else {
    
  }
  accountnumber_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountnumber);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Position.AccountNumber)
}

// .Jde.Markets.Proto.Contract Contract = 2;
inline bool Position::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool Position::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& Position::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Jde::Markets::Proto::Contract*>(
      &::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& Position::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.Contract)
  return _internal_contract();
}
inline ::Jde::Markets::Proto::Contract* Position::release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Position.Contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* Position::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaNoVirtual());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* Position::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Position.Contract)
  return _internal_mutable_contract();
}
inline void Position::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Position.Contract)
}

// double Size = 3;
inline void Position::clear_size() {
  size_ = 0;
}
inline double Position::_internal_size() const {
  return size_;
}
inline double Position::size() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.Size)
  return _internal_size();
}
inline void Position::_internal_set_size(double value) {
  
  size_ = value;
}
inline void Position::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Position.Size)
}

// double AvgCost = 4;
inline void Position::clear_avgcost() {
  avgcost_ = 0;
}
inline double Position::_internal_avgcost() const {
  return avgcost_;
}
inline double Position::avgcost() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.AvgCost)
  return _internal_avgcost();
}
inline void Position::_internal_set_avgcost(double value) {
  
  avgcost_ = value;
}
inline void Position::set_avgcost(double value) {
  _internal_set_avgcost(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Position.AvgCost)
}

// -------------------------------------------------------------------

// AccountList

// repeated string Numbers = 1;
inline int AccountList::_internal_numbers_size() const {
  return numbers_.size();
}
inline int AccountList::numbers_size() const {
  return _internal_numbers_size();
}
inline void AccountList::clear_numbers() {
  numbers_.Clear();
}
inline std::string* AccountList::add_numbers() {
  // @@protoc_insertion_point(field_add_mutable:Jde.Markets.Proto.Results.AccountList.Numbers)
  return _internal_add_numbers();
}
inline const std::string& AccountList::_internal_numbers(int index) const {
  return numbers_.Get(index);
}
inline const std::string& AccountList::numbers(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountList.Numbers)
  return _internal_numbers(index);
}
inline std::string* AccountList::mutable_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountList.Numbers)
  return numbers_.Mutable(index);
}
inline void AccountList::set_numbers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountList.Numbers)
  numbers_.Mutable(index)->assign(value);
}
inline void AccountList::set_numbers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountList.Numbers)
  numbers_.Mutable(index)->assign(std::move(value));
}
inline void AccountList::set_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountList.Numbers)
}
inline void AccountList::set_numbers(int index, const char* value, size_t size) {
  numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountList.Numbers)
}
inline std::string* AccountList::_internal_add_numbers() {
  return numbers_.Add();
}
inline void AccountList::add_numbers(const std::string& value) {
  numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.AccountList.Numbers)
}
inline void AccountList::add_numbers(std::string&& value) {
  numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.AccountList.Numbers)
}
inline void AccountList::add_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Jde.Markets.Proto.Results.AccountList.Numbers)
}
inline void AccountList::add_numbers(const char* value, size_t size) {
  numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Jde.Markets.Proto.Results.AccountList.Numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AccountList::numbers() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.AccountList.Numbers)
  return numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AccountList::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.AccountList.Numbers)
  return &numbers_;
}

// -------------------------------------------------------------------

// AccountUpdate

// string Account = 2;
inline void AccountUpdate::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdate::account() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.Account)
  return _internal_account();
}
inline void AccountUpdate::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.Account)
}
inline std::string* AccountUpdate::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.Account)
  return _internal_mutable_account();
}
inline const std::string& AccountUpdate::_internal_account() const {
  return account_.GetNoArena();
}
inline void AccountUpdate::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdate::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdate.Account)
}
inline void AccountUpdate::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdate.Account)
}
inline void AccountUpdate::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdate.Account)
}
inline std::string* AccountUpdate::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdate::release_account() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.Account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdate::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.Account)
}

// string Key = 4;
inline void AccountUpdate::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdate::key() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.Key)
  return _internal_key();
}
inline void AccountUpdate::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.Key)
}
inline std::string* AccountUpdate::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.Key)
  return _internal_mutable_key();
}
inline const std::string& AccountUpdate::_internal_key() const {
  return key_.GetNoArena();
}
inline void AccountUpdate::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdate::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdate.Key)
}
inline void AccountUpdate::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdate.Key)
}
inline void AccountUpdate::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdate.Key)
}
inline std::string* AccountUpdate::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdate::release_key() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.Key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdate::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.Key)
}

// string Value = 5;
inline void AccountUpdate::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdate::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.Value)
  return _internal_value();
}
inline void AccountUpdate::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.Value)
}
inline std::string* AccountUpdate::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.Value)
  return _internal_mutable_value();
}
inline const std::string& AccountUpdate::_internal_value() const {
  return value_.GetNoArena();
}
inline void AccountUpdate::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdate::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdate.Value)
}
inline void AccountUpdate::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdate.Value)
}
inline void AccountUpdate::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdate.Value)
}
inline std::string* AccountUpdate::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdate::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdate::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.Value)
}

// string Currency = 6;
inline void AccountUpdate::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdate::currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.Currency)
  return _internal_currency();
}
inline void AccountUpdate::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.Currency)
}
inline std::string* AccountUpdate::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.Currency)
  return _internal_mutable_currency();
}
inline const std::string& AccountUpdate::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void AccountUpdate::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdate::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdate.Currency)
}
inline void AccountUpdate::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdate.Currency)
}
inline void AccountUpdate::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdate.Currency)
}
inline std::string* AccountUpdate::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdate::release_currency() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.Currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdate::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.Currency)
}

// -------------------------------------------------------------------

// AccountUpdateMulti

// int32 RequestId = 1;
inline void AccountUpdateMulti::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountUpdateMulti::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountUpdateMulti::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.RequestId)
  return _internal_requestid();
}
inline void AccountUpdateMulti::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void AccountUpdateMulti::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.RequestId)
}

// string Account = 2;
inline void AccountUpdateMulti::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdateMulti::account() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
  return _internal_account();
}
inline void AccountUpdateMulti::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
}
inline std::string* AccountUpdateMulti::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
  return _internal_mutable_account();
}
inline const std::string& AccountUpdateMulti::_internal_account() const {
  return account_.GetNoArena();
}
inline void AccountUpdateMulti::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdateMulti::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
}
inline void AccountUpdateMulti::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
}
inline void AccountUpdateMulti::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
}
inline std::string* AccountUpdateMulti::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdateMulti::release_account() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateMulti::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.Account)
}

// string ModelCode = 3;
inline void AccountUpdateMulti::clear_modelcode() {
  modelcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdateMulti::modelcode() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
  return _internal_modelcode();
}
inline void AccountUpdateMulti::set_modelcode(const std::string& value) {
  _internal_set_modelcode(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
}
inline std::string* AccountUpdateMulti::mutable_modelcode() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
  return _internal_mutable_modelcode();
}
inline const std::string& AccountUpdateMulti::_internal_modelcode() const {
  return modelcode_.GetNoArena();
}
inline void AccountUpdateMulti::_internal_set_modelcode(const std::string& value) {
  
  modelcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdateMulti::set_modelcode(std::string&& value) {
  
  modelcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
}
inline void AccountUpdateMulti::set_modelcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modelcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
}
inline void AccountUpdateMulti::set_modelcode(const char* value, size_t size) {
  
  modelcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
}
inline std::string* AccountUpdateMulti::_internal_mutable_modelcode() {
  
  return modelcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdateMulti::release_modelcode() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
  
  return modelcode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateMulti::set_allocated_modelcode(std::string* modelcode) {
  if (modelcode != nullptr) {
    
  } else {
    
  }
  modelcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelcode);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.ModelCode)
}

// string Key = 4;
inline void AccountUpdateMulti::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdateMulti::key() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
  return _internal_key();
}
inline void AccountUpdateMulti::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
}
inline std::string* AccountUpdateMulti::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
  return _internal_mutable_key();
}
inline const std::string& AccountUpdateMulti::_internal_key() const {
  return key_.GetNoArena();
}
inline void AccountUpdateMulti::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdateMulti::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
}
inline void AccountUpdateMulti::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
}
inline void AccountUpdateMulti::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
}
inline std::string* AccountUpdateMulti::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdateMulti::release_key() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateMulti::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.Key)
}

// string Value = 5;
inline void AccountUpdateMulti::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdateMulti::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
  return _internal_value();
}
inline void AccountUpdateMulti::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
}
inline std::string* AccountUpdateMulti::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
  return _internal_mutable_value();
}
inline const std::string& AccountUpdateMulti::_internal_value() const {
  return value_.GetNoArena();
}
inline void AccountUpdateMulti::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdateMulti::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
}
inline void AccountUpdateMulti::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
}
inline void AccountUpdateMulti::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
}
inline std::string* AccountUpdateMulti::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdateMulti::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateMulti::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.Value)
}

// string Currency = 6;
inline void AccountUpdateMulti::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdateMulti::currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
  return _internal_currency();
}
inline void AccountUpdateMulti::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
}
inline std::string* AccountUpdateMulti::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
  return _internal_mutable_currency();
}
inline const std::string& AccountUpdateMulti::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void AccountUpdateMulti::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountUpdateMulti::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
}
inline void AccountUpdateMulti::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
}
inline void AccountUpdateMulti::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
}
inline std::string* AccountUpdateMulti::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdateMulti::release_currency() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateMulti::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.Currency)
}

// -------------------------------------------------------------------

// Bar

// .google.protobuf.Timestamp Time = 1;
inline bool Bar::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Bar::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bar::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bar::time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.Time)
  return _internal_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bar::release_time() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Bar.Time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bar::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bar::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Bar.Time)
  return _internal_mutable_time();
}
inline void Bar::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Bar.Time)
}

// double High = 2;
inline void Bar::clear_high() {
  high_ = 0;
}
inline double Bar::_internal_high() const {
  return high_;
}
inline double Bar::high() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.High)
  return _internal_high();
}
inline void Bar::_internal_set_high(double value) {
  
  high_ = value;
}
inline void Bar::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.High)
}

// double Low = 3;
inline void Bar::clear_low() {
  low_ = 0;
}
inline double Bar::_internal_low() const {
  return low_;
}
inline double Bar::low() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.Low)
  return _internal_low();
}
inline void Bar::_internal_set_low(double value) {
  
  low_ = value;
}
inline void Bar::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.Low)
}

// double Open = 4;
inline void Bar::clear_open() {
  open_ = 0;
}
inline double Bar::_internal_open() const {
  return open_;
}
inline double Bar::open() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.Open)
  return _internal_open();
}
inline void Bar::_internal_set_open(double value) {
  
  open_ = value;
}
inline void Bar::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.Open)
}

// double Close = 5;
inline void Bar::clear_close() {
  close_ = 0;
}
inline double Bar::_internal_close() const {
  return close_;
}
inline double Bar::close() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.Close)
  return _internal_close();
}
inline void Bar::_internal_set_close(double value) {
  
  close_ = value;
}
inline void Bar::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.Close)
}

// double Wap = 6;
inline void Bar::clear_wap() {
  wap_ = 0;
}
inline double Bar::_internal_wap() const {
  return wap_;
}
inline double Bar::wap() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.Wap)
  return _internal_wap();
}
inline void Bar::_internal_set_wap(double value) {
  
  wap_ = value;
}
inline void Bar::set_wap(double value) {
  _internal_set_wap(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.Wap)
}

// uint64 Volume = 7;
inline void Bar::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bar::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bar::volume() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.Volume)
  return _internal_volume();
}
inline void Bar::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volume_ = value;
}
inline void Bar::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.Volume)
}

// int32 Count = 8;
inline void Bar::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::count() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.Count)
  return _internal_count();
}
inline void Bar::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Bar::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.Count)
}

// -------------------------------------------------------------------

// HistoricalData

// int32 RequestId = 1;
inline void HistoricalData::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalData::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalData::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalData.RequestId)
  return _internal_requestid();
}
inline void HistoricalData::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void HistoricalData::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalData.RequestId)
}

// repeated .Jde.Markets.Proto.Results.Bar Bars = 2;
inline int HistoricalData::_internal_bars_size() const {
  return bars_.size();
}
inline int HistoricalData::bars_size() const {
  return _internal_bars_size();
}
inline void HistoricalData::clear_bars() {
  bars_.Clear();
}
inline ::Jde::Markets::Proto::Results::Bar* HistoricalData::mutable_bars(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.HistoricalData.Bars)
  return bars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >*
HistoricalData::mutable_bars() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.HistoricalData.Bars)
  return &bars_;
}
inline const ::Jde::Markets::Proto::Results::Bar& HistoricalData::_internal_bars(int index) const {
  return bars_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::Bar& HistoricalData::bars(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalData.Bars)
  return _internal_bars(index);
}
inline ::Jde::Markets::Proto::Results::Bar* HistoricalData::_internal_add_bars() {
  return bars_.Add();
}
inline ::Jde::Markets::Proto::Results::Bar* HistoricalData::add_bars() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.HistoricalData.Bars)
  return _internal_add_bars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >&
HistoricalData::bars() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.HistoricalData.Bars)
  return bars_;
}

// -------------------------------------------------------------------

// PortfolioUpdate

// .Jde.Markets.Proto.Contract Contract = 1;
inline bool PortfolioUpdate::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool PortfolioUpdate::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& PortfolioUpdate::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Jde::Markets::Proto::Contract*>(
      &::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& PortfolioUpdate::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.Contract)
  return _internal_contract();
}
inline ::Jde::Markets::Proto::Contract* PortfolioUpdate::release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.PortfolioUpdate.Contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* PortfolioUpdate::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaNoVirtual());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* PortfolioUpdate::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.PortfolioUpdate.Contract)
  return _internal_mutable_contract();
}
inline void PortfolioUpdate::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.PortfolioUpdate.Contract)
}

// double Position = 2;
inline void PortfolioUpdate::clear_position() {
  position_ = 0;
}
inline double PortfolioUpdate::_internal_position() const {
  return position_;
}
inline double PortfolioUpdate::position() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.Position)
  return _internal_position();
}
inline void PortfolioUpdate::_internal_set_position(double value) {
  
  position_ = value;
}
inline void PortfolioUpdate::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.Position)
}

// double MarketPrice = 3;
inline void PortfolioUpdate::clear_marketprice() {
  marketprice_ = 0;
}
inline double PortfolioUpdate::_internal_marketprice() const {
  return marketprice_;
}
inline double PortfolioUpdate::marketprice() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.MarketPrice)
  return _internal_marketprice();
}
inline void PortfolioUpdate::_internal_set_marketprice(double value) {
  
  marketprice_ = value;
}
inline void PortfolioUpdate::set_marketprice(double value) {
  _internal_set_marketprice(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.MarketPrice)
}

// double MarketValue = 4;
inline void PortfolioUpdate::clear_marketvalue() {
  marketvalue_ = 0;
}
inline double PortfolioUpdate::_internal_marketvalue() const {
  return marketvalue_;
}
inline double PortfolioUpdate::marketvalue() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.MarketValue)
  return _internal_marketvalue();
}
inline void PortfolioUpdate::_internal_set_marketvalue(double value) {
  
  marketvalue_ = value;
}
inline void PortfolioUpdate::set_marketvalue(double value) {
  _internal_set_marketvalue(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.MarketValue)
}

// double AverageCost = 5;
inline void PortfolioUpdate::clear_averagecost() {
  averagecost_ = 0;
}
inline double PortfolioUpdate::_internal_averagecost() const {
  return averagecost_;
}
inline double PortfolioUpdate::averagecost() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.AverageCost)
  return _internal_averagecost();
}
inline void PortfolioUpdate::_internal_set_averagecost(double value) {
  
  averagecost_ = value;
}
inline void PortfolioUpdate::set_averagecost(double value) {
  _internal_set_averagecost(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.AverageCost)
}

// double UnrealizedPnl = 6;
inline void PortfolioUpdate::clear_unrealizedpnl() {
  unrealizedpnl_ = 0;
}
inline double PortfolioUpdate::_internal_unrealizedpnl() const {
  return unrealizedpnl_;
}
inline double PortfolioUpdate::unrealizedpnl() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.UnrealizedPnl)
  return _internal_unrealizedpnl();
}
inline void PortfolioUpdate::_internal_set_unrealizedpnl(double value) {
  
  unrealizedpnl_ = value;
}
inline void PortfolioUpdate::set_unrealizedpnl(double value) {
  _internal_set_unrealizedpnl(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.UnrealizedPnl)
}

// double RealizedPnl = 7;
inline void PortfolioUpdate::clear_realizedpnl() {
  realizedpnl_ = 0;
}
inline double PortfolioUpdate::_internal_realizedpnl() const {
  return realizedpnl_;
}
inline double PortfolioUpdate::realizedpnl() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.RealizedPnl)
  return _internal_realizedpnl();
}
inline void PortfolioUpdate::_internal_set_realizedpnl(double value) {
  
  realizedpnl_ = value;
}
inline void PortfolioUpdate::set_realizedpnl(double value) {
  _internal_set_realizedpnl(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.RealizedPnl)
}

// string AccountNumber = 8;
inline void PortfolioUpdate::clear_accountnumber() {
  accountnumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PortfolioUpdate::accountnumber() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
  return _internal_accountnumber();
}
inline void PortfolioUpdate::set_accountnumber(const std::string& value) {
  _internal_set_accountnumber(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
}
inline std::string* PortfolioUpdate::mutable_accountnumber() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
  return _internal_mutable_accountnumber();
}
inline const std::string& PortfolioUpdate::_internal_accountnumber() const {
  return accountnumber_.GetNoArena();
}
inline void PortfolioUpdate::_internal_set_accountnumber(const std::string& value) {
  
  accountnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PortfolioUpdate::set_accountnumber(std::string&& value) {
  
  accountnumber_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
}
inline void PortfolioUpdate::set_accountnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
}
inline void PortfolioUpdate::set_accountnumber(const char* value, size_t size) {
  
  accountnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
}
inline std::string* PortfolioUpdate::_internal_mutable_accountnumber() {
  
  return accountnumber_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PortfolioUpdate::release_accountnumber() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
  
  return accountnumber_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PortfolioUpdate::set_allocated_accountnumber(std::string* accountnumber) {
  if (accountnumber != nullptr) {
    
  } else {
    
  }
  accountnumber_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountnumber);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.PortfolioUpdate.AccountNumber)
}

// -------------------------------------------------------------------

// Order

// uint32 Id = 1;
inline void Order::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.Id)
  return _internal_id();
}
inline void Order::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Order::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.Id)
}

// string AccountId = 2;
inline void Order::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::accountid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.AccountId)
  return _internal_accountid();
}
inline void Order::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.AccountId)
}
inline std::string* Order::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Order.AccountId)
  return _internal_mutable_accountid();
}
inline const std::string& Order::_internal_accountid() const {
  return accountid_.GetNoArena();
}
inline void Order::_internal_set_accountid(const std::string& value) {
  
  accountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_accountid(std::string&& value) {
  
  accountid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Order.AccountId)
}
inline void Order::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Order.AccountId)
}
inline void Order::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Order.AccountId)
}
inline std::string* Order::_internal_mutable_accountid() {
  
  return accountid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_accountid() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Order.AccountId)
  
  return accountid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Order.AccountId)
}

// string Symbol = 3;
inline void Order::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::symbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.Symbol)
  return _internal_symbol();
}
inline void Order::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.Symbol)
}
inline std::string* Order::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Order.Symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Order::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void Order::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Order.Symbol)
}
inline void Order::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Order.Symbol)
}
inline void Order::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Order.Symbol)
}
inline std::string* Order::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_symbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Order.Symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Order.Symbol)
}

// uint32 Conid = 4;
inline void Order::clear_conid() {
  conid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_conid() const {
  return conid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::conid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.Conid)
  return _internal_conid();
}
inline void Order::_internal_set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  conid_ = value;
}
inline void Order::set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.Conid)
}

// uint32 Date = 5;
inline void Order::clear_date() {
  date_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::date() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.Date)
  return _internal_date();
}
inline void Order::_internal_set_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  date_ = value;
}
inline void Order::set_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.Date)
}

// string BuySell = 6;
inline void Order::clear_buysell() {
  buysell_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::buysell() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.BuySell)
  return _internal_buysell();
}
inline void Order::set_buysell(const std::string& value) {
  _internal_set_buysell(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.BuySell)
}
inline std::string* Order::mutable_buysell() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Order.BuySell)
  return _internal_mutable_buysell();
}
inline const std::string& Order::_internal_buysell() const {
  return buysell_.GetNoArena();
}
inline void Order::_internal_set_buysell(const std::string& value) {
  
  buysell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_buysell(std::string&& value) {
  
  buysell_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Order.BuySell)
}
inline void Order::set_buysell(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buysell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Order.BuySell)
}
inline void Order::set_buysell(const char* value, size_t size) {
  
  buysell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Order.BuySell)
}
inline std::string* Order::_internal_mutable_buysell() {
  
  return buysell_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_buysell() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Order.BuySell)
  
  return buysell_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_buysell(std::string* buysell) {
  if (buysell != nullptr) {
    
  } else {
    
  }
  buysell_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buysell);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Order.BuySell)
}

// double Quantity = 7;
inline void Order::clear_quantity() {
  quantity_ = 0;
}
inline double Order::_internal_quantity() const {
  return quantity_;
}
inline double Order::quantity() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.Quantity)
  return _internal_quantity();
}
inline void Order::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void Order::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.Quantity)
}

// double Price = 8;
inline void Order::clear_price() {
  price_ = 0;
}
inline double Order::_internal_price() const {
  return price_;
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.Price)
  return _internal_price();
}
inline void Order::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Order::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.Price)
}

// double Commission = 9;
inline void Order::clear_commission() {
  commission_ = 0;
}
inline double Order::_internal_commission() const {
  return commission_;
}
inline double Order::commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.Commission)
  return _internal_commission();
}
inline void Order::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void Order::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.Commission)
}

// string OrderType = 10;
inline void Order::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::ordertype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.OrderType)
  return _internal_ordertype();
}
inline void Order::set_ordertype(const std::string& value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.OrderType)
}
inline std::string* Order::mutable_ordertype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Order.OrderType)
  return _internal_mutable_ordertype();
}
inline const std::string& Order::_internal_ordertype() const {
  return ordertype_.GetNoArena();
}
inline void Order::_internal_set_ordertype(const std::string& value) {
  
  ordertype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_ordertype(std::string&& value) {
  
  ordertype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Order.OrderType)
}
inline void Order::set_ordertype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordertype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Order.OrderType)
}
inline void Order::set_ordertype(const char* value, size_t size) {
  
  ordertype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Order.OrderType)
}
inline std::string* Order::_internal_mutable_ordertype() {
  
  return ordertype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_ordertype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Order.OrderType)
  
  return ordertype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_ordertype(std::string* ordertype) {
  if (ordertype != nullptr) {
    
  } else {
    
  }
  ordertype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Order.OrderType)
}

// uint32 OrderTime = 11;
inline void Order::clear_ordertime() {
  ordertime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_ordertime() const {
  return ordertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::ordertime() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Order.OrderTime)
  return _internal_ordertime();
}
inline void Order::_internal_set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ordertime_ = value;
}
inline void Order::set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ordertime(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Order.OrderTime)
}

// -------------------------------------------------------------------

// Trade

// uint32 OrderId = 1;
inline void Trade::clear_orderid() {
  orderid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::orderid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.OrderId)
  return _internal_orderid();
}
inline void Trade::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  orderid_ = value;
}
inline void Trade::set_orderid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.OrderId)
}

// string AccountId = 2;
inline void Trade::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trade::accountid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.AccountId)
  return _internal_accountid();
}
inline void Trade::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.AccountId)
}
inline std::string* Trade::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.AccountId)
  return _internal_mutable_accountid();
}
inline const std::string& Trade::_internal_accountid() const {
  return accountid_.GetNoArena();
}
inline void Trade::_internal_set_accountid(const std::string& value) {
  
  accountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trade::set_accountid(std::string&& value) {
  
  accountid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Trade.AccountId)
}
inline void Trade::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Trade.AccountId)
}
inline void Trade::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Trade.AccountId)
}
inline std::string* Trade::_internal_mutable_accountid() {
  
  return accountid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trade::release_accountid() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.AccountId)
  
  return accountid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.AccountId)
}

// string Symbol = 3;
inline void Trade::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trade::symbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.Symbol)
  return _internal_symbol();
}
inline void Trade::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.Symbol)
}
inline std::string* Trade::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.Symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Trade::_internal_symbol() const {
  return symbol_.GetNoArena();
}
inline void Trade::_internal_set_symbol(const std::string& value) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trade::set_symbol(std::string&& value) {
  
  symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Trade.Symbol)
}
inline void Trade::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Trade.Symbol)
}
inline void Trade::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Trade.Symbol)
}
inline std::string* Trade::_internal_mutable_symbol() {
  
  return symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trade::release_symbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.Symbol)
  
  return symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.Symbol)
}

// uint32 Conid = 4;
inline void Trade::clear_conid() {
  conid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_conid() const {
  return conid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::conid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.Conid)
  return _internal_conid();
}
inline void Trade::_internal_set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  conid_ = value;
}
inline void Trade::set_conid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.Conid)
}

// uint32 Date = 5;
inline void Trade::clear_date() {
  date_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::date() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.Date)
  return _internal_date();
}
inline void Trade::_internal_set_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  date_ = value;
}
inline void Trade::set_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.Date)
}

// string BuySell = 6;
inline void Trade::clear_buysell() {
  buysell_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trade::buysell() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.BuySell)
  return _internal_buysell();
}
inline void Trade::set_buysell(const std::string& value) {
  _internal_set_buysell(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.BuySell)
}
inline std::string* Trade::mutable_buysell() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.BuySell)
  return _internal_mutable_buysell();
}
inline const std::string& Trade::_internal_buysell() const {
  return buysell_.GetNoArena();
}
inline void Trade::_internal_set_buysell(const std::string& value) {
  
  buysell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trade::set_buysell(std::string&& value) {
  
  buysell_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Trade.BuySell)
}
inline void Trade::set_buysell(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buysell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Trade.BuySell)
}
inline void Trade::set_buysell(const char* value, size_t size) {
  
  buysell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Trade.BuySell)
}
inline std::string* Trade::_internal_mutable_buysell() {
  
  return buysell_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trade::release_buysell() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.BuySell)
  
  return buysell_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_buysell(std::string* buysell) {
  if (buysell != nullptr) {
    
  } else {
    
  }
  buysell_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buysell);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.BuySell)
}

// double Quantity = 7;
inline void Trade::clear_quantity() {
  quantity_ = 0;
}
inline double Trade::_internal_quantity() const {
  return quantity_;
}
inline double Trade::quantity() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.Quantity)
  return _internal_quantity();
}
inline void Trade::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void Trade::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.Quantity)
}

// double Price = 8;
inline void Trade::clear_price() {
  price_ = 0;
}
inline double Trade::_internal_price() const {
  return price_;
}
inline double Trade::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.Price)
  return _internal_price();
}
inline void Trade::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Trade::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.Price)
}

// double Commission = 9;
inline void Trade::clear_commission() {
  commission_ = 0;
}
inline double Trade::_internal_commission() const {
  return commission_;
}
inline double Trade::commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.Commission)
  return _internal_commission();
}
inline void Trade::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void Trade::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.Commission)
}

// string OrderType = 10;
inline void Trade::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trade::ordertype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.OrderType)
  return _internal_ordertype();
}
inline void Trade::set_ordertype(const std::string& value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.OrderType)
}
inline std::string* Trade::mutable_ordertype() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.OrderType)
  return _internal_mutable_ordertype();
}
inline const std::string& Trade::_internal_ordertype() const {
  return ordertype_.GetNoArena();
}
inline void Trade::_internal_set_ordertype(const std::string& value) {
  
  ordertype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trade::set_ordertype(std::string&& value) {
  
  ordertype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Trade.OrderType)
}
inline void Trade::set_ordertype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordertype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Trade.OrderType)
}
inline void Trade::set_ordertype(const char* value, size_t size) {
  
  ordertype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Trade.OrderType)
}
inline std::string* Trade::_internal_mutable_ordertype() {
  
  return ordertype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trade::release_ordertype() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.OrderType)
  
  return ordertype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_ordertype(std::string* ordertype) {
  if (ordertype != nullptr) {
    
  } else {
    
  }
  ordertype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.OrderType)
}

// uint32 OrderTime = 11;
inline void Trade::clear_ordertime() {
  ordertime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_ordertime() const {
  return ordertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::ordertime() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.OrderTime)
  return _internal_ordertime();
}
inline void Trade::_internal_set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ordertime_ = value;
}
inline void Trade::set_ordertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ordertime(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.OrderTime)
}

// uint32 Id = 12;
inline void Trade::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.Id)
  return _internal_id();
}
inline void Trade::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Trade::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.Id)
}

// string ExecId = 13;
inline void Trade::clear_execid() {
  execid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trade::execid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.ExecId)
  return _internal_execid();
}
inline void Trade::set_execid(const std::string& value) {
  _internal_set_execid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.ExecId)
}
inline std::string* Trade::mutable_execid() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.ExecId)
  return _internal_mutable_execid();
}
inline const std::string& Trade::_internal_execid() const {
  return execid_.GetNoArena();
}
inline void Trade::_internal_set_execid(const std::string& value) {
  
  execid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trade::set_execid(std::string&& value) {
  
  execid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Trade.ExecId)
}
inline void Trade::set_execid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  execid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Trade.ExecId)
}
inline void Trade::set_execid(const char* value, size_t size) {
  
  execid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Trade.ExecId)
}
inline std::string* Trade::_internal_mutable_execid() {
  
  return execid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trade::release_execid() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.ExecId)
  
  return execid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_execid(std::string* execid) {
  if (execid != nullptr) {
    
  } else {
    
  }
  execid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execid);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.ExecId)
}

// bool IsApi = 14;
inline void Trade::clear_isapi() {
  isapi_ = false;
}
inline bool Trade::_internal_isapi() const {
  return isapi_;
}
inline bool Trade::isapi() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.IsApi)
  return _internal_isapi();
}
inline void Trade::_internal_set_isapi(bool value) {
  
  isapi_ = value;
}
inline void Trade::set_isapi(bool value) {
  _internal_set_isapi(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.IsApi)
}

// -------------------------------------------------------------------

// Flex

// uint32 RequestId = 1;
inline void Flex::clear_requestid() {
  requestid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Flex::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Flex::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Flex.RequestId)
  return _internal_requestid();
}
inline void Flex::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  requestid_ = value;
}
inline void Flex::set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Flex.RequestId)
}

// repeated .Jde.Markets.Proto.Results.Order Orders = 2;
inline int Flex::_internal_orders_size() const {
  return orders_.size();
}
inline int Flex::orders_size() const {
  return _internal_orders_size();
}
inline void Flex::clear_orders() {
  orders_.Clear();
}
inline ::Jde::Markets::Proto::Results::Order* Flex::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Flex.Orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Order >*
Flex::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.Flex.Orders)
  return &orders_;
}
inline const ::Jde::Markets::Proto::Results::Order& Flex::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::Order& Flex::orders(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Flex.Orders)
  return _internal_orders(index);
}
inline ::Jde::Markets::Proto::Results::Order* Flex::_internal_add_orders() {
  return orders_.Add();
}
inline ::Jde::Markets::Proto::Results::Order* Flex::add_orders() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.Flex.Orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Order >&
Flex::orders() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.Flex.Orders)
  return orders_;
}

// repeated .Jde.Markets.Proto.Results.Trade Trades = 3;
inline int Flex::_internal_trades_size() const {
  return trades_.size();
}
inline int Flex::trades_size() const {
  return _internal_trades_size();
}
inline void Flex::clear_trades() {
  trades_.Clear();
}
inline ::Jde::Markets::Proto::Results::Trade* Flex::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Flex.Trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >*
Flex::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.Flex.Trades)
  return &trades_;
}
inline const ::Jde::Markets::Proto::Results::Trade& Flex::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::Trade& Flex::trades(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Flex.Trades)
  return _internal_trades(index);
}
inline ::Jde::Markets::Proto::Results::Trade* Flex::_internal_add_trades() {
  return trades_.Add();
}
inline ::Jde::Markets::Proto::Results::Trade* Flex::add_trades() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.Flex.Trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >&
Flex::trades() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.Flex.Trades)
  return trades_;
}

// -------------------------------------------------------------------

// Error

// int32 RequestId = 1;
inline void Error::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Error.RequestId)
  return _internal_requestid();
}
inline void Error::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void Error::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Error.RequestId)
}

// int32 Code = 2;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Error.Code)
  return _internal_code();
}
inline void Error::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Error::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Error.Code)
}

// string Message = 3;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Error.Message)
  return _internal_message();
}
inline void Error::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Error.Message)
}
inline std::string* Error::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Error.Message)
  return _internal_mutable_message();
}
inline const std::string& Error::_internal_message() const {
  return message_.GetNoArena();
}
inline void Error::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Error::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.Error.Message)
}
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.Error.Message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.Error.Message)
}
inline std::string* Error::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Error.Message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Error.Message)
}

// -------------------------------------------------------------------

// Option

// uint32 ContractId = 1;
inline void Option::clear_contractid() {
  contractid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::_internal_contractid() const {
  return contractid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::contractid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.ContractId)
  return _internal_contractid();
}
inline void Option::_internal_set_contractid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contractid_ = value;
}
inline void Option::set_contractid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contractid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.ContractId)
}

// float Strike = 2;
inline void Option::clear_strike() {
  strike_ = 0;
}
inline float Option::_internal_strike() const {
  return strike_;
}
inline float Option::strike() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.Strike)
  return _internal_strike();
}
inline void Option::_internal_set_strike(float value) {
  
  strike_ = value;
}
inline void Option::set_strike(float value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.Strike)
}

// float Bid = 3;
inline void Option::clear_bid() {
  bid_ = 0;
}
inline float Option::_internal_bid() const {
  return bid_;
}
inline float Option::bid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.Bid)
  return _internal_bid();
}
inline void Option::_internal_set_bid(float value) {
  
  bid_ = value;
}
inline void Option::set_bid(float value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.Bid)
}

// float Ask = 4;
inline void Option::clear_ask() {
  ask_ = 0;
}
inline float Option::_internal_ask() const {
  return ask_;
}
inline float Option::ask() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.Ask)
  return _internal_ask();
}
inline void Option::_internal_set_ask(float value) {
  
  ask_ = value;
}
inline void Option::set_ask(float value) {
  _internal_set_ask(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.Ask)
}

// float Last = 5;
inline void Option::clear_last() {
  last_ = 0;
}
inline float Option::_internal_last() const {
  return last_;
}
inline float Option::last() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.Last)
  return _internal_last();
}
inline void Option::_internal_set_last(float value) {
  
  last_ = value;
}
inline void Option::set_last(float value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.Last)
}

// float Volume = 6;
inline void Option::clear_volume() {
  volume_ = 0;
}
inline float Option::_internal_volume() const {
  return volume_;
}
inline float Option::volume() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.Volume)
  return _internal_volume();
}
inline void Option::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void Option::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.Volume)
}

// uint32 OpenInterest = 7;
inline void Option::clear_openinterest() {
  openinterest_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::_internal_openinterest() const {
  return openinterest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::openinterest() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.OpenInterest)
  return _internal_openinterest();
}
inline void Option::_internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  openinterest_ = value;
}
inline void Option::set_openinterest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_openinterest(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.OpenInterest)
}

// int32 OIChange = 8;
inline void Option::clear_oichange() {
  oichange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Option::_internal_oichange() const {
  return oichange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Option::oichange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.OIChange)
  return _internal_oichange();
}
inline void Option::_internal_set_oichange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oichange_ = value;
}
inline void Option::set_oichange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oichange(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.OIChange)
}

// float PreviousPrice = 9;
inline void Option::clear_previousprice() {
  previousprice_ = 0;
}
inline float Option::_internal_previousprice() const {
  return previousprice_;
}
inline float Option::previousprice() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.PreviousPrice)
  return _internal_previousprice();
}
inline void Option::_internal_set_previousprice(float value) {
  
  previousprice_ = value;
}
inline void Option::set_previousprice(float value) {
  _internal_set_previousprice(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.PreviousPrice)
}

// -------------------------------------------------------------------

// OptionDay

// bool IsCall = 1;
inline void OptionDay::clear_iscall() {
  iscall_ = false;
}
inline bool OptionDay::_internal_iscall() const {
  return iscall_;
}
inline bool OptionDay::iscall() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionDay.IsCall)
  return _internal_iscall();
}
inline void OptionDay::_internal_set_iscall(bool value) {
  
  iscall_ = value;
}
inline void OptionDay::set_iscall(bool value) {
  _internal_set_iscall(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionDay.IsCall)
}

// uint32 ExpirationDays = 2;
inline void OptionDay::clear_expirationdays() {
  expirationdays_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionDay::_internal_expirationdays() const {
  return expirationdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionDay::expirationdays() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionDay.ExpirationDays)
  return _internal_expirationdays();
}
inline void OptionDay::_internal_set_expirationdays(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expirationdays_ = value;
}
inline void OptionDay::set_expirationdays(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expirationdays(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionDay.ExpirationDays)
}

// repeated .Jde.Markets.Proto.Results.Option Values = 3;
inline int OptionDay::_internal_values_size() const {
  return values_.size();
}
inline int OptionDay::values_size() const {
  return _internal_values_size();
}
inline void OptionDay::clear_values() {
  values_.Clear();
}
inline ::Jde::Markets::Proto::Results::Option* OptionDay::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OptionDay.Values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >*
OptionDay::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.OptionDay.Values)
  return &values_;
}
inline const ::Jde::Markets::Proto::Results::Option& OptionDay::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::Option& OptionDay::values(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionDay.Values)
  return _internal_values(index);
}
inline ::Jde::Markets::Proto::Results::Option* OptionDay::_internal_add_values() {
  return values_.Add();
}
inline ::Jde::Markets::Proto::Results::Option* OptionDay::add_values() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.OptionDay.Values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >&
OptionDay::values() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.OptionDay.Values)
  return values_;
}

// -------------------------------------------------------------------

// OptionValues

// uint32 RequestId = 1;
inline void OptionValues::clear_requestid() {
  requestid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionValues::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionValues::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionValues.RequestId)
  return _internal_requestid();
}
inline void OptionValues::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  requestid_ = value;
}
inline void OptionValues::set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionValues.RequestId)
}

// repeated .Jde.Markets.Proto.Results.OptionDay OptionDays = 2;
inline int OptionValues::_internal_optiondays_size() const {
  return optiondays_.size();
}
inline int OptionValues::optiondays_size() const {
  return _internal_optiondays_size();
}
inline void OptionValues::clear_optiondays() {
  optiondays_.Clear();
}
inline ::Jde::Markets::Proto::Results::OptionDay* OptionValues::mutable_optiondays(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OptionValues.OptionDays)
  return optiondays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >*
OptionValues::mutable_optiondays() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.OptionValues.OptionDays)
  return &optiondays_;
}
inline const ::Jde::Markets::Proto::Results::OptionDay& OptionValues::_internal_optiondays(int index) const {
  return optiondays_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::OptionDay& OptionValues::optiondays(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionValues.OptionDays)
  return _internal_optiondays(index);
}
inline ::Jde::Markets::Proto::Results::OptionDay* OptionValues::_internal_add_optiondays() {
  return optiondays_.Add();
}
inline ::Jde::Markets::Proto::Results::OptionDay* OptionValues::add_optiondays() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.OptionValues.OptionDays)
  return _internal_add_optiondays();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >&
OptionValues::optiondays() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.OptionValues.OptionDays)
  return optiondays_;
}

// -------------------------------------------------------------------

// MessageUnion

// .Jde.Markets.Proto.Results.Position Position = 1;
inline bool MessageUnion::_internal_has_position() const {
  return Value_case() == kPosition;
}
inline bool MessageUnion::has_position() const {
  return _internal_has_position();
}
inline void MessageUnion::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void MessageUnion::clear_position() {
  if (_internal_has_position()) {
    delete Value_.position_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Position* MessageUnion::release_position() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.Position)
  if (has_position()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Position* temp = Value_.position_;
    Value_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Position& MessageUnion::_internal_position() const {
  return _internal_has_position()
      ? *Value_.position_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::Position*>(&::Jde::Markets::Proto::Results::_Position_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Position& MessageUnion::position() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.Position)
  return _internal_position();
}
inline ::Jde::Markets::Proto::Results::Position* MessageUnion::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_Value();
    set_has_position();
    Value_.position_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Position >(
        GetArenaNoVirtual());
  }
  return Value_.position_;
}
inline ::Jde::Markets::Proto::Results::Position* MessageUnion::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.Position)
  return _internal_mutable_position();
}

// .Jde.Markets.Proto.Contract Contract = 2;
inline bool MessageUnion::_internal_has_contract() const {
  return Value_case() == kContract;
}
inline bool MessageUnion::has_contract() const {
  return _internal_has_contract();
}
inline void MessageUnion::set_has_contract() {
  _oneof_case_[0] = kContract;
}
inline ::Jde::Markets::Proto::Contract* MessageUnion::release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.Contract)
  if (has_contract()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Contract* temp = Value_.contract_;
    Value_.contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Contract& MessageUnion::_internal_contract() const {
  return _internal_has_contract()
      ? *Value_.contract_
      : *reinterpret_cast< ::Jde::Markets::Proto::Contract*>(&::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& MessageUnion::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.Contract)
  return _internal_contract();
}
inline ::Jde::Markets::Proto::Contract* MessageUnion::_internal_mutable_contract() {
  if (!_internal_has_contract()) {
    clear_Value();
    set_has_contract();
    Value_.contract_ = CreateMaybeMessage< ::Jde::Markets::Proto::Contract >(
        GetArenaNoVirtual());
  }
  return Value_.contract_;
}
inline ::Jde::Markets::Proto::Contract* MessageUnion::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.Contract)
  return _internal_mutable_contract();
}

// .Jde.Markets.Proto.Results.MessageValue Message = 3;
inline bool MessageUnion::_internal_has_message() const {
  return Value_case() == kMessage;
}
inline bool MessageUnion::has_message() const {
  return _internal_has_message();
}
inline void MessageUnion::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void MessageUnion::clear_message() {
  if (_internal_has_message()) {
    delete Value_.message_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::MessageValue* MessageUnion::release_message() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.Message)
  if (has_message()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::MessageValue* temp = Value_.message_;
    Value_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::MessageValue& MessageUnion::_internal_message() const {
  return _internal_has_message()
      ? *Value_.message_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::MessageValue*>(&::Jde::Markets::Proto::Results::_MessageValue_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::MessageValue& MessageUnion::message() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.Message)
  return _internal_message();
}
inline ::Jde::Markets::Proto::Results::MessageValue* MessageUnion::_internal_mutable_message() {
  if (!_internal_has_message()) {
    clear_Value();
    set_has_message();
    Value_.message_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::MessageValue >(
        GetArenaNoVirtual());
  }
  return Value_.message_;
}
inline ::Jde::Markets::Proto::Results::MessageValue* MessageUnion::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.Message)
  return _internal_mutable_message();
}

// .Jde.Markets.Proto.Results.AccountList AccountList = 4;
inline bool MessageUnion::_internal_has_accountlist() const {
  return Value_case() == kAccountList;
}
inline bool MessageUnion::has_accountlist() const {
  return _internal_has_accountlist();
}
inline void MessageUnion::set_has_accountlist() {
  _oneof_case_[0] = kAccountList;
}
inline void MessageUnion::clear_accountlist() {
  if (_internal_has_accountlist()) {
    delete Value_.accountlist_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::AccountList* MessageUnion::release_accountlist() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.AccountList)
  if (has_accountlist()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::AccountList* temp = Value_.accountlist_;
    Value_.accountlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::AccountList& MessageUnion::_internal_accountlist() const {
  return _internal_has_accountlist()
      ? *Value_.accountlist_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::AccountList*>(&::Jde::Markets::Proto::Results::_AccountList_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::AccountList& MessageUnion::accountlist() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.AccountList)
  return _internal_accountlist();
}
inline ::Jde::Markets::Proto::Results::AccountList* MessageUnion::_internal_mutable_accountlist() {
  if (!_internal_has_accountlist()) {
    clear_Value();
    set_has_accountlist();
    Value_.accountlist_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::AccountList >(
        GetArenaNoVirtual());
  }
  return Value_.accountlist_;
}
inline ::Jde::Markets::Proto::Results::AccountList* MessageUnion::mutable_accountlist() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.AccountList)
  return _internal_mutable_accountlist();
}

// .Jde.Markets.Proto.Results.AccountUpdate AccountUpdate = 5;
inline bool MessageUnion::_internal_has_accountupdate() const {
  return Value_case() == kAccountUpdate;
}
inline bool MessageUnion::has_accountupdate() const {
  return _internal_has_accountupdate();
}
inline void MessageUnion::set_has_accountupdate() {
  _oneof_case_[0] = kAccountUpdate;
}
inline void MessageUnion::clear_accountupdate() {
  if (_internal_has_accountupdate()) {
    delete Value_.accountupdate_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::AccountUpdate* MessageUnion::release_accountupdate() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.AccountUpdate)
  if (has_accountupdate()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::AccountUpdate* temp = Value_.accountupdate_;
    Value_.accountupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::AccountUpdate& MessageUnion::_internal_accountupdate() const {
  return _internal_has_accountupdate()
      ? *Value_.accountupdate_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::AccountUpdate*>(&::Jde::Markets::Proto::Results::_AccountUpdate_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::AccountUpdate& MessageUnion::accountupdate() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.AccountUpdate)
  return _internal_accountupdate();
}
inline ::Jde::Markets::Proto::Results::AccountUpdate* MessageUnion::_internal_mutable_accountupdate() {
  if (!_internal_has_accountupdate()) {
    clear_Value();
    set_has_accountupdate();
    Value_.accountupdate_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::AccountUpdate >(
        GetArenaNoVirtual());
  }
  return Value_.accountupdate_;
}
inline ::Jde::Markets::Proto::Results::AccountUpdate* MessageUnion::mutable_accountupdate() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.AccountUpdate)
  return _internal_mutable_accountupdate();
}

// .Jde.Markets.Proto.Results.AccountUpdateMulti AccountUpdateMulti = 6;
inline bool MessageUnion::_internal_has_accountupdatemulti() const {
  return Value_case() == kAccountUpdateMulti;
}
inline bool MessageUnion::has_accountupdatemulti() const {
  return _internal_has_accountupdatemulti();
}
inline void MessageUnion::set_has_accountupdatemulti() {
  _oneof_case_[0] = kAccountUpdateMulti;
}
inline void MessageUnion::clear_accountupdatemulti() {
  if (_internal_has_accountupdatemulti()) {
    delete Value_.accountupdatemulti_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::AccountUpdateMulti* MessageUnion::release_accountupdatemulti() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.AccountUpdateMulti)
  if (has_accountupdatemulti()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::AccountUpdateMulti* temp = Value_.accountupdatemulti_;
    Value_.accountupdatemulti_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::AccountUpdateMulti& MessageUnion::_internal_accountupdatemulti() const {
  return _internal_has_accountupdatemulti()
      ? *Value_.accountupdatemulti_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::AccountUpdateMulti*>(&::Jde::Markets::Proto::Results::_AccountUpdateMulti_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::AccountUpdateMulti& MessageUnion::accountupdatemulti() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.AccountUpdateMulti)
  return _internal_accountupdatemulti();
}
inline ::Jde::Markets::Proto::Results::AccountUpdateMulti* MessageUnion::_internal_mutable_accountupdatemulti() {
  if (!_internal_has_accountupdatemulti()) {
    clear_Value();
    set_has_accountupdatemulti();
    Value_.accountupdatemulti_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::AccountUpdateMulti >(
        GetArenaNoVirtual());
  }
  return Value_.accountupdatemulti_;
}
inline ::Jde::Markets::Proto::Results::AccountUpdateMulti* MessageUnion::mutable_accountupdatemulti() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.AccountUpdateMulti)
  return _internal_mutable_accountupdatemulti();
}

// .Jde.Markets.Proto.Results.PortfolioUpdate PortfolioUpdate = 7;
inline bool MessageUnion::_internal_has_portfolioupdate() const {
  return Value_case() == kPortfolioUpdate;
}
inline bool MessageUnion::has_portfolioupdate() const {
  return _internal_has_portfolioupdate();
}
inline void MessageUnion::set_has_portfolioupdate() {
  _oneof_case_[0] = kPortfolioUpdate;
}
inline void MessageUnion::clear_portfolioupdate() {
  if (_internal_has_portfolioupdate()) {
    delete Value_.portfolioupdate_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::PortfolioUpdate* MessageUnion::release_portfolioupdate() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.PortfolioUpdate)
  if (has_portfolioupdate()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::PortfolioUpdate* temp = Value_.portfolioupdate_;
    Value_.portfolioupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::PortfolioUpdate& MessageUnion::_internal_portfolioupdate() const {
  return _internal_has_portfolioupdate()
      ? *Value_.portfolioupdate_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::PortfolioUpdate*>(&::Jde::Markets::Proto::Results::_PortfolioUpdate_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::PortfolioUpdate& MessageUnion::portfolioupdate() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.PortfolioUpdate)
  return _internal_portfolioupdate();
}
inline ::Jde::Markets::Proto::Results::PortfolioUpdate* MessageUnion::_internal_mutable_portfolioupdate() {
  if (!_internal_has_portfolioupdate()) {
    clear_Value();
    set_has_portfolioupdate();
    Value_.portfolioupdate_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::PortfolioUpdate >(
        GetArenaNoVirtual());
  }
  return Value_.portfolioupdate_;
}
inline ::Jde::Markets::Proto::Results::PortfolioUpdate* MessageUnion::mutable_portfolioupdate() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.PortfolioUpdate)
  return _internal_mutable_portfolioupdate();
}

// .Jde.Markets.Proto.Results.TickGeneric TickGeneric = 8;
inline bool MessageUnion::_internal_has_tickgeneric() const {
  return Value_case() == kTickGeneric;
}
inline bool MessageUnion::has_tickgeneric() const {
  return _internal_has_tickgeneric();
}
inline void MessageUnion::set_has_tickgeneric() {
  _oneof_case_[0] = kTickGeneric;
}
inline void MessageUnion::clear_tickgeneric() {
  if (_internal_has_tickgeneric()) {
    delete Value_.tickgeneric_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickGeneric* MessageUnion::release_tickgeneric() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.TickGeneric)
  if (has_tickgeneric()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickGeneric* temp = Value_.tickgeneric_;
    Value_.tickgeneric_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickGeneric& MessageUnion::_internal_tickgeneric() const {
  return _internal_has_tickgeneric()
      ? *Value_.tickgeneric_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::TickGeneric*>(&::Jde::Markets::Proto::Results::_TickGeneric_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickGeneric& MessageUnion::tickgeneric() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.TickGeneric)
  return _internal_tickgeneric();
}
inline ::Jde::Markets::Proto::Results::TickGeneric* MessageUnion::_internal_mutable_tickgeneric() {
  if (!_internal_has_tickgeneric()) {
    clear_Value();
    set_has_tickgeneric();
    Value_.tickgeneric_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickGeneric >(
        GetArenaNoVirtual());
  }
  return Value_.tickgeneric_;
}
inline ::Jde::Markets::Proto::Results::TickGeneric* MessageUnion::mutable_tickgeneric() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.TickGeneric)
  return _internal_mutable_tickgeneric();
}

// .Jde.Markets.Proto.Results.TickPrice TickPrice = 9;
inline bool MessageUnion::_internal_has_tickprice() const {
  return Value_case() == kTickPrice;
}
inline bool MessageUnion::has_tickprice() const {
  return _internal_has_tickprice();
}
inline void MessageUnion::set_has_tickprice() {
  _oneof_case_[0] = kTickPrice;
}
inline void MessageUnion::clear_tickprice() {
  if (_internal_has_tickprice()) {
    delete Value_.tickprice_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickPrice* MessageUnion::release_tickprice() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.TickPrice)
  if (has_tickprice()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickPrice* temp = Value_.tickprice_;
    Value_.tickprice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickPrice& MessageUnion::_internal_tickprice() const {
  return _internal_has_tickprice()
      ? *Value_.tickprice_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::TickPrice*>(&::Jde::Markets::Proto::Results::_TickPrice_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickPrice& MessageUnion::tickprice() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.TickPrice)
  return _internal_tickprice();
}
inline ::Jde::Markets::Proto::Results::TickPrice* MessageUnion::_internal_mutable_tickprice() {
  if (!_internal_has_tickprice()) {
    clear_Value();
    set_has_tickprice();
    Value_.tickprice_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickPrice >(
        GetArenaNoVirtual());
  }
  return Value_.tickprice_;
}
inline ::Jde::Markets::Proto::Results::TickPrice* MessageUnion::mutable_tickprice() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.TickPrice)
  return _internal_mutable_tickprice();
}

// .Jde.Markets.Proto.Results.TickSize TickSize = 10;
inline bool MessageUnion::_internal_has_ticksize() const {
  return Value_case() == kTickSize;
}
inline bool MessageUnion::has_ticksize() const {
  return _internal_has_ticksize();
}
inline void MessageUnion::set_has_ticksize() {
  _oneof_case_[0] = kTickSize;
}
inline void MessageUnion::clear_ticksize() {
  if (_internal_has_ticksize()) {
    delete Value_.ticksize_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickSize* MessageUnion::release_ticksize() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.TickSize)
  if (has_ticksize()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickSize* temp = Value_.ticksize_;
    Value_.ticksize_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickSize& MessageUnion::_internal_ticksize() const {
  return _internal_has_ticksize()
      ? *Value_.ticksize_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::TickSize*>(&::Jde::Markets::Proto::Results::_TickSize_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickSize& MessageUnion::ticksize() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.TickSize)
  return _internal_ticksize();
}
inline ::Jde::Markets::Proto::Results::TickSize* MessageUnion::_internal_mutable_ticksize() {
  if (!_internal_has_ticksize()) {
    clear_Value();
    set_has_ticksize();
    Value_.ticksize_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickSize >(
        GetArenaNoVirtual());
  }
  return Value_.ticksize_;
}
inline ::Jde::Markets::Proto::Results::TickSize* MessageUnion::mutable_ticksize() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.TickSize)
  return _internal_mutable_ticksize();
}

// .Jde.Markets.Proto.Results.TickString TickString = 11;
inline bool MessageUnion::_internal_has_tickstring() const {
  return Value_case() == kTickString;
}
inline bool MessageUnion::has_tickstring() const {
  return _internal_has_tickstring();
}
inline void MessageUnion::set_has_tickstring() {
  _oneof_case_[0] = kTickString;
}
inline void MessageUnion::clear_tickstring() {
  if (_internal_has_tickstring()) {
    delete Value_.tickstring_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickString* MessageUnion::release_tickstring() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.TickString)
  if (has_tickstring()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickString* temp = Value_.tickstring_;
    Value_.tickstring_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickString& MessageUnion::_internal_tickstring() const {
  return _internal_has_tickstring()
      ? *Value_.tickstring_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::TickString*>(&::Jde::Markets::Proto::Results::_TickString_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickString& MessageUnion::tickstring() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.TickString)
  return _internal_tickstring();
}
inline ::Jde::Markets::Proto::Results::TickString* MessageUnion::_internal_mutable_tickstring() {
  if (!_internal_has_tickstring()) {
    clear_Value();
    set_has_tickstring();
    Value_.tickstring_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickString >(
        GetArenaNoVirtual());
  }
  return Value_.tickstring_;
}
inline ::Jde::Markets::Proto::Results::TickString* MessageUnion::mutable_tickstring() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.TickString)
  return _internal_mutable_tickstring();
}

// .Jde.Markets.Proto.Results.ContractDetails ContractDetails = 12;
inline bool MessageUnion::_internal_has_contractdetails() const {
  return Value_case() == kContractDetails;
}
inline bool MessageUnion::has_contractdetails() const {
  return _internal_has_contractdetails();
}
inline void MessageUnion::set_has_contractdetails() {
  _oneof_case_[0] = kContractDetails;
}
inline void MessageUnion::clear_contractdetails() {
  if (_internal_has_contractdetails()) {
    delete Value_.contractdetails_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::ContractDetails* MessageUnion::release_contractdetails() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.ContractDetails)
  if (has_contractdetails()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::ContractDetails* temp = Value_.contractdetails_;
    Value_.contractdetails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::ContractDetails& MessageUnion::_internal_contractdetails() const {
  return _internal_has_contractdetails()
      ? *Value_.contractdetails_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::ContractDetails*>(&::Jde::Markets::Proto::Results::_ContractDetails_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::ContractDetails& MessageUnion::contractdetails() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.ContractDetails)
  return _internal_contractdetails();
}
inline ::Jde::Markets::Proto::Results::ContractDetails* MessageUnion::_internal_mutable_contractdetails() {
  if (!_internal_has_contractdetails()) {
    clear_Value();
    set_has_contractdetails();
    Value_.contractdetails_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::ContractDetails >(
        GetArenaNoVirtual());
  }
  return Value_.contractdetails_;
}
inline ::Jde::Markets::Proto::Results::ContractDetails* MessageUnion::mutable_contractdetails() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.ContractDetails)
  return _internal_mutable_contractdetails();
}

// .Jde.Markets.Proto.Results.Error Error = 13;
inline bool MessageUnion::_internal_has_error() const {
  return Value_case() == kError;
}
inline bool MessageUnion::has_error() const {
  return _internal_has_error();
}
inline void MessageUnion::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void MessageUnion::clear_error() {
  if (_internal_has_error()) {
    delete Value_.error_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Error* MessageUnion::release_error() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.Error)
  if (has_error()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Error* temp = Value_.error_;
    Value_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Error& MessageUnion::_internal_error() const {
  return _internal_has_error()
      ? *Value_.error_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::Error*>(&::Jde::Markets::Proto::Results::_Error_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Error& MessageUnion::error() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.Error)
  return _internal_error();
}
inline ::Jde::Markets::Proto::Results::Error* MessageUnion::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_Value();
    set_has_error();
    Value_.error_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Error >(
        GetArenaNoVirtual());
  }
  return Value_.error_;
}
inline ::Jde::Markets::Proto::Results::Error* MessageUnion::mutable_error() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.Error)
  return _internal_mutable_error();
}

// .Jde.Markets.Proto.Results.OptionValues Options = 14;
inline bool MessageUnion::_internal_has_options() const {
  return Value_case() == kOptions;
}
inline bool MessageUnion::has_options() const {
  return _internal_has_options();
}
inline void MessageUnion::set_has_options() {
  _oneof_case_[0] = kOptions;
}
inline void MessageUnion::clear_options() {
  if (_internal_has_options()) {
    delete Value_.options_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::OptionValues* MessageUnion::release_options() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.Options)
  if (has_options()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::OptionValues* temp = Value_.options_;
    Value_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::OptionValues& MessageUnion::_internal_options() const {
  return _internal_has_options()
      ? *Value_.options_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::OptionValues*>(&::Jde::Markets::Proto::Results::_OptionValues_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::OptionValues& MessageUnion::options() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.Options)
  return _internal_options();
}
inline ::Jde::Markets::Proto::Results::OptionValues* MessageUnion::_internal_mutable_options() {
  if (!_internal_has_options()) {
    clear_Value();
    set_has_options();
    Value_.options_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::OptionValues >(
        GetArenaNoVirtual());
  }
  return Value_.options_;
}
inline ::Jde::Markets::Proto::Results::OptionValues* MessageUnion::mutable_options() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.Options)
  return _internal_mutable_options();
}

// .Jde.Markets.Proto.Results.HistoricalData HistoricalData = 15;
inline bool MessageUnion::_internal_has_historicaldata() const {
  return Value_case() == kHistoricalData;
}
inline bool MessageUnion::has_historicaldata() const {
  return _internal_has_historicaldata();
}
inline void MessageUnion::set_has_historicaldata() {
  _oneof_case_[0] = kHistoricalData;
}
inline void MessageUnion::clear_historicaldata() {
  if (_internal_has_historicaldata()) {
    delete Value_.historicaldata_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::HistoricalData* MessageUnion::release_historicaldata() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.HistoricalData)
  if (has_historicaldata()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::HistoricalData* temp = Value_.historicaldata_;
    Value_.historicaldata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::HistoricalData& MessageUnion::_internal_historicaldata() const {
  return _internal_has_historicaldata()
      ? *Value_.historicaldata_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::HistoricalData*>(&::Jde::Markets::Proto::Results::_HistoricalData_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::HistoricalData& MessageUnion::historicaldata() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.HistoricalData)
  return _internal_historicaldata();
}
inline ::Jde::Markets::Proto::Results::HistoricalData* MessageUnion::_internal_mutable_historicaldata() {
  if (!_internal_has_historicaldata()) {
    clear_Value();
    set_has_historicaldata();
    Value_.historicaldata_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::HistoricalData >(
        GetArenaNoVirtual());
  }
  return Value_.historicaldata_;
}
inline ::Jde::Markets::Proto::Results::HistoricalData* MessageUnion::mutable_historicaldata() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.HistoricalData)
  return _internal_mutable_historicaldata();
}

// .Jde.Markets.Proto.Results.StringResult StringResult = 16;
inline bool MessageUnion::_internal_has_stringresult() const {
  return Value_case() == kStringResult;
}
inline bool MessageUnion::has_stringresult() const {
  return _internal_has_stringresult();
}
inline void MessageUnion::set_has_stringresult() {
  _oneof_case_[0] = kStringResult;
}
inline void MessageUnion::clear_stringresult() {
  if (_internal_has_stringresult()) {
    delete Value_.stringresult_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::StringResult* MessageUnion::release_stringresult() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.StringResult)
  if (has_stringresult()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::StringResult* temp = Value_.stringresult_;
    Value_.stringresult_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::StringResult& MessageUnion::_internal_stringresult() const {
  return _internal_has_stringresult()
      ? *Value_.stringresult_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::StringResult*>(&::Jde::Markets::Proto::Results::_StringResult_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::StringResult& MessageUnion::stringresult() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.StringResult)
  return _internal_stringresult();
}
inline ::Jde::Markets::Proto::Results::StringResult* MessageUnion::_internal_mutable_stringresult() {
  if (!_internal_has_stringresult()) {
    clear_Value();
    set_has_stringresult();
    Value_.stringresult_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::StringResult >(
        GetArenaNoVirtual());
  }
  return Value_.stringresult_;
}
inline ::Jde::Markets::Proto::Results::StringResult* MessageUnion::mutable_stringresult() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.StringResult)
  return _internal_mutable_stringresult();
}

// .Jde.Markets.Proto.Results.Flex Flex = 17;
inline bool MessageUnion::_internal_has_flex() const {
  return Value_case() == kFlex;
}
inline bool MessageUnion::has_flex() const {
  return _internal_has_flex();
}
inline void MessageUnion::set_has_flex() {
  _oneof_case_[0] = kFlex;
}
inline void MessageUnion::clear_flex() {
  if (_internal_has_flex()) {
    delete Value_.flex_;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Flex* MessageUnion::release_flex() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.Flex)
  if (has_flex()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Flex* temp = Value_.flex_;
    Value_.flex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Flex& MessageUnion::_internal_flex() const {
  return _internal_has_flex()
      ? *Value_.flex_
      : *reinterpret_cast< ::Jde::Markets::Proto::Results::Flex*>(&::Jde::Markets::Proto::Results::_Flex_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Flex& MessageUnion::flex() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.Flex)
  return _internal_flex();
}
inline ::Jde::Markets::Proto::Results::Flex* MessageUnion::_internal_mutable_flex() {
  if (!_internal_has_flex()) {
    clear_Value();
    set_has_flex();
    Value_.flex_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Flex >(
        GetArenaNoVirtual());
  }
  return Value_.flex_;
}
inline ::Jde::Markets::Proto::Results::Flex* MessageUnion::mutable_flex() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.Flex)
  return _internal_mutable_flex();
}

inline bool MessageUnion::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void MessageUnion::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MessageUnion::ValueCase MessageUnion::Value_case() const {
  return MessageUnion::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transmission

// repeated .Jde.Markets.Proto.Results.MessageUnion Messages = 10;
inline int Transmission::_internal_messages_size() const {
  return messages_.size();
}
inline int Transmission::messages_size() const {
  return _internal_messages_size();
}
inline void Transmission::clear_messages() {
  messages_.Clear();
}
inline ::Jde::Markets::Proto::Results::MessageUnion* Transmission::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Transmission.Messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >*
Transmission::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.Transmission.Messages)
  return &messages_;
}
inline const ::Jde::Markets::Proto::Results::MessageUnion& Transmission::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::MessageUnion& Transmission::messages(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Transmission.Messages)
  return _internal_messages(index);
}
inline ::Jde::Markets::Proto::Results::MessageUnion* Transmission::_internal_add_messages() {
  return messages_.Add();
}
inline ::Jde::Markets::Proto::Results::MessageUnion* Transmission::add_messages() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.Transmission.Messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >&
Transmission::messages() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.Transmission.Messages)
  return messages_;
}

// -------------------------------------------------------------------

// TickGeneric

// int32 RequestId = 1;
inline void TickGeneric::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickGeneric::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickGeneric::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickGeneric.RequestId)
  return _internal_requestid();
}
inline void TickGeneric::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void TickGeneric::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickGeneric.RequestId)
}

// .Jde.Markets.Proto.Results.ETickType TickType = 2;
inline void TickGeneric::clear_ticktype() {
  ticktype_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickGeneric::_internal_ticktype() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(ticktype_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickGeneric::ticktype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickGeneric.TickType)
  return _internal_ticktype();
}
inline void TickGeneric::_internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  
  ticktype_ = value;
}
inline void TickGeneric::set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_ticktype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickGeneric.TickType)
}

// double Value = 3;
inline void TickGeneric::clear_value() {
  value_ = 0;
}
inline double TickGeneric::_internal_value() const {
  return value_;
}
inline double TickGeneric::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickGeneric.Value)
  return _internal_value();
}
inline void TickGeneric::_internal_set_value(double value) {
  
  value_ = value;
}
inline void TickGeneric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickGeneric.Value)
}

// -------------------------------------------------------------------

// TickAttrib

// bool CanAutoExecute = 1;
inline void TickAttrib::clear_canautoexecute() {
  canautoexecute_ = false;
}
inline bool TickAttrib::_internal_canautoexecute() const {
  return canautoexecute_;
}
inline bool TickAttrib::canautoexecute() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickAttrib.CanAutoExecute)
  return _internal_canautoexecute();
}
inline void TickAttrib::_internal_set_canautoexecute(bool value) {
  
  canautoexecute_ = value;
}
inline void TickAttrib::set_canautoexecute(bool value) {
  _internal_set_canautoexecute(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickAttrib.CanAutoExecute)
}

// bool PastLimit = 2;
inline void TickAttrib::clear_pastlimit() {
  pastlimit_ = false;
}
inline bool TickAttrib::_internal_pastlimit() const {
  return pastlimit_;
}
inline bool TickAttrib::pastlimit() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickAttrib.PastLimit)
  return _internal_pastlimit();
}
inline void TickAttrib::_internal_set_pastlimit(bool value) {
  
  pastlimit_ = value;
}
inline void TickAttrib::set_pastlimit(bool value) {
  _internal_set_pastlimit(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickAttrib.PastLimit)
}

// bool PreOpen = 3;
inline void TickAttrib::clear_preopen() {
  preopen_ = false;
}
inline bool TickAttrib::_internal_preopen() const {
  return preopen_;
}
inline bool TickAttrib::preopen() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickAttrib.PreOpen)
  return _internal_preopen();
}
inline void TickAttrib::_internal_set_preopen(bool value) {
  
  preopen_ = value;
}
inline void TickAttrib::set_preopen(bool value) {
  _internal_set_preopen(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickAttrib.PreOpen)
}

// -------------------------------------------------------------------

// TickPrice

// int32 RequestId = 1;
inline void TickPrice::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickPrice::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickPrice::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.RequestId)
  return _internal_requestid();
}
inline void TickPrice::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void TickPrice::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickPrice.RequestId)
}

// .Jde.Markets.Proto.Results.ETickType TickType = 2;
inline void TickPrice::clear_ticktype() {
  ticktype_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickPrice::_internal_ticktype() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(ticktype_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickPrice::ticktype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.TickType)
  return _internal_ticktype();
}
inline void TickPrice::_internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  
  ticktype_ = value;
}
inline void TickPrice::set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_ticktype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickPrice.TickType)
}

// double Price = 3;
inline void TickPrice::clear_price() {
  price_ = 0;
}
inline double TickPrice::_internal_price() const {
  return price_;
}
inline double TickPrice::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.Price)
  return _internal_price();
}
inline void TickPrice::_internal_set_price(double value) {
  
  price_ = value;
}
inline void TickPrice::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickPrice.Price)
}

// .Jde.Markets.Proto.Results.TickAttrib Attributes = 4;
inline bool TickPrice::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool TickPrice::has_attributes() const {
  return _internal_has_attributes();
}
inline void TickPrice::clear_attributes() {
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::Jde::Markets::Proto::Results::TickAttrib& TickPrice::_internal_attributes() const {
  const ::Jde::Markets::Proto::Results::TickAttrib* p = attributes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Jde::Markets::Proto::Results::TickAttrib*>(
      &::Jde::Markets::Proto::Results::_TickAttrib_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickAttrib& TickPrice::attributes() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.Attributes)
  return _internal_attributes();
}
inline ::Jde::Markets::Proto::Results::TickAttrib* TickPrice::release_attributes() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickPrice.Attributes)
  
  ::Jde::Markets::Proto::Results::TickAttrib* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Results::TickAttrib* TickPrice::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Results::TickAttrib>(GetArenaNoVirtual());
    attributes_ = p;
  }
  return attributes_;
}
inline ::Jde::Markets::Proto::Results::TickAttrib* TickPrice::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickPrice.Attributes)
  return _internal_mutable_attributes();
}
inline void TickPrice::set_allocated_attributes(::Jde::Markets::Proto::Results::TickAttrib* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickPrice.Attributes)
}

// -------------------------------------------------------------------

// TickSize

// int32 RequestId = 1;
inline void TickSize::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickSize::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickSize::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickSize.RequestId)
  return _internal_requestid();
}
inline void TickSize::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void TickSize::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickSize.RequestId)
}

// .Jde.Markets.Proto.Results.ETickType TickType = 2;
inline void TickSize::clear_ticktype() {
  ticktype_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickSize::_internal_ticktype() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(ticktype_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickSize::ticktype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickSize.TickType)
  return _internal_ticktype();
}
inline void TickSize::_internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  
  ticktype_ = value;
}
inline void TickSize::set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_ticktype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickSize.TickType)
}

// int32 Size = 3;
inline void TickSize::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickSize::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickSize::size() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickSize.Size)
  return _internal_size();
}
inline void TickSize::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void TickSize::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickSize.Size)
}

// -------------------------------------------------------------------

// TickString

// int32 RequestId = 1;
inline void TickString::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickString::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickString::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickString.RequestId)
  return _internal_requestid();
}
inline void TickString::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void TickString::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickString.RequestId)
}

// .Jde.Markets.Proto.Results.ETickType TickType = 2;
inline void TickString::clear_ticktype() {
  ticktype_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickString::_internal_ticktype() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(ticktype_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickString::ticktype() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickString.TickType)
  return _internal_ticktype();
}
inline void TickString::_internal_set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  
  ticktype_ = value;
}
inline void TickString::set_ticktype(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_ticktype(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickString.TickType)
}

// string Value = 3;
inline void TickString::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TickString::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickString.Value)
  return _internal_value();
}
inline void TickString::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickString.Value)
}
inline std::string* TickString::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickString.Value)
  return _internal_mutable_value();
}
inline const std::string& TickString::_internal_value() const {
  return value_.GetNoArena();
}
inline void TickString::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TickString::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Jde.Markets.Proto.Results.TickString.Value)
}
inline void TickString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.TickString.Value)
}
inline void TickString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.TickString.Value)
}
inline std::string* TickString::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TickString::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickString.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TickString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickString.Value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Results
}  // namespace Proto
}  // namespace Markets
}  // namespace Jde

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Jde::Markets::Proto::Results::ETickType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::Results::ETickType>() {
  return ::Jde::Markets::Proto::Results::ETickType_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::Results::EResults> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::Results::EResults>() {
  return ::Jde::Markets::Proto::Results::EResults_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_results_2eproto
